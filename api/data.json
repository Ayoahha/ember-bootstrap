{
    "project": {
        "name": "ember-bootstrap",
        "description": "Twitter Bootstrap components for Ember.js",
        "version": "1.0.0"
    },
    "files": {
        "addon/components/base/bs-accordion/item/body.js": {
            "name": "addon/components/base/bs-accordion/item/body.js",
            "modules": {},
            "classes": {
                "Components.AccordionBody": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-accordion/item/title.js": {
            "name": "addon/components/base/bs-accordion/item/title.js",
            "modules": {},
            "classes": {
                "Components.AccordionTitle": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-accordion/item.js": {
            "name": "addon/components/base/bs-accordion/item.js",
            "modules": {},
            "classes": {
                "Components.AccordionItem": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-button-group/button.js": {
            "name": "addon/components/base/bs-button-group/button.js",
            "modules": {},
            "classes": {
                "Components.ButtonGroupButton": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-contextual-help/element.js": {
            "name": "addon/components/base/bs-contextual-help/element.js",
            "modules": {},
            "classes": {
                "Components.ContextualHelpElement": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-dropdown/menu/divider.js": {
            "name": "addon/components/base/bs-dropdown/menu/divider.js",
            "modules": {},
            "classes": {
                "Components.DropdownMenuDivider": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-dropdown/menu/item.js": {
            "name": "addon/components/base/bs-dropdown/menu/item.js",
            "modules": {},
            "classes": {
                "Components.DropdownMenuItem": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-dropdown/menu/link-to.js": {
            "name": "addon/components/base/bs-dropdown/menu/link-to.js",
            "modules": {},
            "classes": {
                "Components.DropdownMenuLinkTo": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-dropdown/button.js": {
            "name": "addon/components/base/bs-dropdown/button.js",
            "modules": {},
            "classes": {
                "Components.DropdownButton": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-dropdown/menu.js": {
            "name": "addon/components/base/bs-dropdown/menu.js",
            "modules": {},
            "classes": {
                "Components.DropdownMenu": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-dropdown/toggle.js": {
            "name": "addon/components/base/bs-dropdown/toggle.js",
            "modules": {},
            "classes": {
                "Components.DropdownToggle": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/control/checkbox.js": {
            "name": "addon/components/base/bs-form/element/control/checkbox.js",
            "modules": {},
            "classes": {
                "Components.FormElementControlCheckbox": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/control/input.js": {
            "name": "addon/components/base/bs-form/element/control/input.js",
            "modules": {},
            "classes": {
                "Components.FormElementControlInput": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/control/textarea.js": {
            "name": "addon/components/base/bs-form/element/control/textarea.js",
            "modules": {},
            "classes": {
                "Components.FormElementControlTextarea": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/layout/horizontal/checkbox.js": {
            "name": "addon/components/base/bs-form/element/layout/horizontal/checkbox.js",
            "modules": {},
            "classes": {
                "Components.FormElementLayoutHorizontalCheckbox": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/layout/inline/checkbox.js": {
            "name": "addon/components/base/bs-form/element/layout/inline/checkbox.js",
            "modules": {},
            "classes": {
                "Components.FormElementLayoutInlineCheckbox": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/layout/vertical/checkbox.js": {
            "name": "addon/components/base/bs-form/element/layout/vertical/checkbox.js",
            "modules": {},
            "classes": {
                "Components.FormElementLayoutVerticalCheckbox": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/layout/horizontal.js": {
            "name": "addon/components/base/bs-form/element/layout/horizontal.js",
            "modules": {},
            "classes": {
                "Components.FormElementLayoutHorizontal": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/layout/inline.js": {
            "name": "addon/components/base/bs-form/element/layout/inline.js",
            "modules": {},
            "classes": {
                "Components.FormElementLayoutInline": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/layout/vertical.js": {
            "name": "addon/components/base/bs-form/element/layout/vertical.js",
            "modules": {},
            "classes": {
                "Components.FormElementLayoutVertical": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/control.js": {
            "name": "addon/components/base/bs-form/element/control.js",
            "modules": {},
            "classes": {
                "Components.FormElementControl": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/errors.js": {
            "name": "addon/components/base/bs-form/element/errors.js",
            "modules": {},
            "classes": {
                "Components.FormElementErrors": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/feedback-icon.js": {
            "name": "addon/components/base/bs-form/element/feedback-icon.js",
            "modules": {},
            "classes": {
                "Components.FormElementFeedbackIcon": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/help-text.js": {
            "name": "addon/components/base/bs-form/element/help-text.js",
            "modules": {},
            "classes": {
                "Components.FormElementHelpText": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/label.js": {
            "name": "addon/components/base/bs-form/element/label.js",
            "modules": {},
            "classes": {
                "Components.FormElementLabel": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element/layout.js": {
            "name": "addon/components/base/bs-form/element/layout.js",
            "modules": {},
            "classes": {
                "Components.FormElementLayout": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/element.js": {
            "name": "addon/components/base/bs-form/element.js",
            "modules": {},
            "classes": {
                "Components.FormElement": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form/group.js": {
            "name": "addon/components/base/bs-form/group.js",
            "modules": {},
            "classes": {
                "Components.FormGroup": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-modal/header/close.js": {
            "name": "addon/components/base/bs-modal/header/close.js",
            "modules": {},
            "classes": {
                "Components.ModalHeaderClose": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-modal/header/title.js": {
            "name": "addon/components/base/bs-modal/header/title.js",
            "modules": {},
            "classes": {
                "Components.ModalHeaderTitle": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-modal/body.js": {
            "name": "addon/components/base/bs-modal/body.js",
            "modules": {},
            "classes": {
                "Components.ModalBody": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-modal/dialog.js": {
            "name": "addon/components/base/bs-modal/dialog.js",
            "modules": {},
            "classes": {
                "Components.ModalDialog": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-modal/footer.js": {
            "name": "addon/components/base/bs-modal/footer.js",
            "modules": {},
            "classes": {
                "Components.ModalFooter": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-modal/header.js": {
            "name": "addon/components/base/bs-modal/header.js",
            "modules": {},
            "classes": {
                "Components.ModalHeader": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-nav/item.js": {
            "name": "addon/components/base/bs-nav/item.js",
            "modules": {},
            "classes": {
                "Components.NavItem": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-nav/link-to.js": {
            "name": "addon/components/base/bs-nav/link-to.js",
            "modules": {},
            "classes": {
                "Components.NavLinkTo": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-navbar/content.js": {
            "name": "addon/components/base/bs-navbar/content.js",
            "modules": {},
            "classes": {
                "Components.NavbarContent": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-navbar/link-to.js": {
            "name": "addon/components/base/bs-navbar/link-to.js",
            "modules": {},
            "classes": {
                "Components.NavbarLinkTo": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-navbar/nav.js": {
            "name": "addon/components/base/bs-navbar/nav.js",
            "modules": {},
            "classes": {
                "Components.NavbarNav": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-navbar/toggle.js": {
            "name": "addon/components/base/bs-navbar/toggle.js",
            "modules": {},
            "classes": {
                "Components.NavbarToggle": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-popover/element.js": {
            "name": "addon/components/base/bs-popover/element.js",
            "modules": {},
            "classes": {
                "Components.PopoverElement": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-progress/bar.js": {
            "name": "addon/components/base/bs-progress/bar.js",
            "modules": {},
            "classes": {
                "Components.ProgressBar": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-tab/pane.js": {
            "name": "addon/components/base/bs-tab/pane.js",
            "modules": {},
            "classes": {
                "Components.TabPane": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-tooltip/element.js": {
            "name": "addon/components/base/bs-tooltip/element.js",
            "modules": {},
            "classes": {
                "Components.TooltipElement": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-accordion.js": {
            "name": "addon/components/base/bs-accordion.js",
            "modules": {},
            "classes": {
                "Components.Accordion": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-alert.js": {
            "name": "addon/components/base/bs-alert.js",
            "modules": {},
            "classes": {
                "Components.Alert": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-button-group.js": {
            "name": "addon/components/base/bs-button-group.js",
            "modules": {},
            "classes": {
                "Components.ButtonGroup": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-button.js": {
            "name": "addon/components/base/bs-button.js",
            "modules": {},
            "classes": {
                "Components.Button": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-collapse.js": {
            "name": "addon/components/base/bs-collapse.js",
            "modules": {},
            "classes": {
                "Components.Collapse": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-contextual-help.js": {
            "name": "addon/components/base/bs-contextual-help.js",
            "modules": {},
            "classes": {
                "Components.ContextualHelp": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-dropdown.js": {
            "name": "addon/components/base/bs-dropdown.js",
            "modules": {},
            "classes": {
                "Components.Dropdown": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-form.js": {
            "name": "addon/components/base/bs-form.js",
            "modules": {},
            "classes": {
                "Components.Form": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-modal-simple.js": {
            "name": "addon/components/base/bs-modal-simple.js",
            "modules": {},
            "classes": {
                "Components.ModalSimple": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-modal.js": {
            "name": "addon/components/base/bs-modal.js",
            "modules": {},
            "classes": {
                "Components.Modal": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-nav.js": {
            "name": "addon/components/base/bs-nav.js",
            "modules": {},
            "classes": {
                "Components.Nav": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-navbar.js": {
            "name": "addon/components/base/bs-navbar.js",
            "modules": {},
            "classes": {
                "Components.Navbar": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-popover.js": {
            "name": "addon/components/base/bs-popover.js",
            "modules": {},
            "classes": {
                "Components.Popover": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-progress.js": {
            "name": "addon/components/base/bs-progress.js",
            "modules": {},
            "classes": {
                "Components.Progress": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-tab.js": {
            "name": "addon/components/base/bs-tab.js",
            "modules": {},
            "classes": {
                "Components.Tab": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/base/bs-tooltip.js": {
            "name": "addon/components/base/bs-tooltip.js",
            "modules": {},
            "classes": {
                "Components.Tooltip": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/mixins/component-child.js": {
            "name": "addon/mixins/component-child.js",
            "modules": {},
            "classes": {
                "Mixins.ComponentChild": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/component-parent.js": {
            "name": "addon/mixins/component-parent.js",
            "modules": {},
            "classes": {
                "Mixins.ComponentParent": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/control-attributes.js": {
            "name": "addon/mixins/control-attributes.js",
            "modules": {},
            "classes": {
                "Mixins.ControlAttributes": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/control-validation.js": {
            "name": "addon/mixins/control-validation.js",
            "modules": {},
            "classes": {
                "Mixins.ControlValidation": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/dropdown-toggle.js": {
            "name": "addon/mixins/dropdown-toggle.js",
            "modules": {},
            "classes": {
                "Mixins.DropdownToggle": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/size-class.js": {
            "name": "addon/mixins/size-class.js",
            "modules": {},
            "classes": {
                "Mixins.SizeClass": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/sub-component.js": {
            "name": "addon/mixins/sub-component.js",
            "modules": {},
            "classes": {
                "Mixins.SubComponent": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/transition-support.js": {
            "name": "addon/mixins/transition-support.js",
            "modules": {},
            "classes": {
                "Mixins.TransitionSupport": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/type-class.js": {
            "name": "addon/mixins/type-class.js",
            "modules": {},
            "classes": {
                "Mixins.TypeClass": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "Components.AccordionBody": {
            "name": "Components.AccordionBody",
            "shortname": "Components.AccordionBody",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-accordion/item/body.js",
            "line": 4,
            "description": "Component for an accordion item body.\n\nSee [Components.Accordion](Components.Accordion.html) for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.AccordionTitle": {
            "name": "Components.AccordionTitle",
            "shortname": "Components.AccordionTitle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-accordion/item/title.js",
            "line": 4,
            "description": "Component for an accordion item title.\n\nSee [Components.Accordion](Components.Accordion.html) for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.AccordionItem": {
            "name": "Components.AccordionItem",
            "shortname": "Components.AccordionItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-accordion/item.js",
            "line": 7,
            "description": "A collapsible/expandable item within an accordion\n\nSee [Components.Accordion](Components.Accordion.html) for examples.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TypeClass"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.ButtonGroupButton": {
            "name": "Components.ButtonGroupButton",
            "shortname": "Components.ButtonGroupButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-button-group/button.js",
            "line": 5,
            "description": "Internal component for button-group buttons",
            "extends": "Components.Button",
            "access": "private",
            "tagname": ""
        },
        "Components.ContextualHelpElement": {
            "name": "Components.ContextualHelpElement",
            "shortname": "Components.ContextualHelpElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 8,
            "description": "Internal (abstract) component for contextual help markup. Should not be used directly.",
            "extends": "Ember.Component",
            "access": "private",
            "tagname": ""
        },
        "Components.DropdownMenuDivider": {
            "name": "Components.DropdownMenuDivider",
            "shortname": "Components.DropdownMenuDivider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-dropdown/menu/divider.js",
            "line": 3,
            "description": "Component for a dropdown menu divider.\n\nSee [Components.Dropdown](Components.Dropdown.html) for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.DropdownMenuItem": {
            "name": "Components.DropdownMenuItem",
            "shortname": "Components.DropdownMenuItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-dropdown/menu/item.js",
            "line": 3,
            "description": "Component for a dropdown menu item.\n\nSee [Components.Dropdown](Components.Dropdown.html) for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.DropdownMenuLinkTo": {
            "name": "Components.DropdownMenuLinkTo",
            "shortname": "Components.DropdownMenuLinkTo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-dropdown/menu/link-to.js",
            "line": 3,
            "description": "Extended `{{link-to}}` component for use within Dropdowns.",
            "extends": "Ember.LinkComponent",
            "access": "public",
            "tagname": ""
        },
        "Components.DropdownButton": {
            "name": "Components.DropdownButton",
            "shortname": "Components.DropdownButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-dropdown/button.js",
            "line": 4,
            "description": "Button component with that can act as a dropdown toggler.\n\nSee [Components.Dropdown](Components.Dropdown.html) for examples.",
            "extends": "Components.Button",
            "uses": [
                "Mixins.DropdownToggle"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.DropdownMenu": {
            "name": "Components.DropdownMenu",
            "shortname": "Components.DropdownMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-dropdown/menu.js",
            "line": 5,
            "description": "Component for the dropdown menu.\n\nSee [Components.Dropdown](Components.Dropdown.html) for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.DropdownToggle": {
            "name": "Components.DropdownToggle",
            "shortname": "Components.DropdownToggle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-dropdown/toggle.js",
            "line": 5,
            "description": "Anchor element that triggers the parent dropdown to open.\nUse [Components.DropdownButton](Components.DropdownButton.html) if you want a button instead of an anchor tag.\n\nSee [Components.Dropdown](Components.Dropdown.html) for examples.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.DropdownToggle"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.FormElementControlCheckbox": {
            "name": "Components.FormElementControlCheckbox",
            "shortname": "Components.FormElementControlCheckbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/control/checkbox.js",
            "line": 4,
            "extends": "Components.FormElementControl",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementControlInput": {
            "name": "Components.FormElementControlInput",
            "shortname": "Components.FormElementControlInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/control/input.js",
            "line": 4,
            "extends": "Components.FormElementControl",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementControlTextarea": {
            "name": "Components.FormElementControlTextarea",
            "shortname": "Components.FormElementControlTextarea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/control/textarea.js",
            "line": 4,
            "extends": "Components.FormElementControl",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementLayoutHorizontalCheckbox": {
            "name": "Components.FormElementLayoutHorizontalCheckbox",
            "shortname": "Components.FormElementLayoutHorizontalCheckbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/layout/horizontal/checkbox.js",
            "line": 4,
            "extends": "Components.FormElementLayout",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementLayoutInlineCheckbox": {
            "name": "Components.FormElementLayoutInlineCheckbox",
            "shortname": "Components.FormElementLayoutInlineCheckbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/layout/inline/checkbox.js",
            "line": 4,
            "extends": "Components.FormElementLayout",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementLayoutVerticalCheckbox": {
            "name": "Components.FormElementLayoutVerticalCheckbox",
            "shortname": "Components.FormElementLayoutVerticalCheckbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/layout/vertical/checkbox.js",
            "line": 4,
            "extends": "Components.FormElementLayout",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementLayoutHorizontal": {
            "name": "Components.FormElementLayoutHorizontal",
            "shortname": "Components.FormElementLayoutHorizontal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/layout/horizontal.js",
            "line": 7,
            "extends": "Components.FormElementLayout",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementLayoutInline": {
            "name": "Components.FormElementLayoutInline",
            "shortname": "Components.FormElementLayoutInline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/layout/inline.js",
            "line": 4,
            "extends": "Components.FormElementLayout",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementLayoutVertical": {
            "name": "Components.FormElementLayoutVertical",
            "shortname": "Components.FormElementLayoutVertical",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/layout/vertical.js",
            "line": 4,
            "extends": "Components.FormElementLayout",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementControl": {
            "name": "Components.FormElementControl",
            "shortname": "Components.FormElementControl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/control.js",
            "line": 3,
            "extends": "Ember.Component",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementErrors": {
            "name": "Components.FormElementErrors",
            "shortname": "Components.FormElementErrors",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/errors.js",
            "line": 4,
            "extends": "Ember.Component",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementFeedbackIcon": {
            "name": "Components.FormElementFeedbackIcon",
            "shortname": "Components.FormElementFeedbackIcon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/feedback-icon.js",
            "line": 4,
            "extends": "Ember.Component",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementHelpText": {
            "name": "Components.FormElementHelpText",
            "shortname": "Components.FormElementHelpText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/help-text.js",
            "line": 4,
            "extends": "Ember.Component",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementLabel": {
            "name": "Components.FormElementLabel",
            "shortname": "Components.FormElementLabel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/label.js",
            "line": 5,
            "extends": "Ember.Component",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElementLayout": {
            "name": "Components.FormElementLayout",
            "shortname": "Components.FormElementLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element/layout.js",
            "line": 3,
            "extends": "Ember.Component",
            "access": "private",
            "tagname": ""
        },
        "Components.FormElement": {
            "name": "Components.FormElement",
            "shortname": "Components.FormElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/element.js",
            "line": 22,
            "description": "Sub class of `Components.FormGroup` that adds automatic form layout markup and form validation features.\n\n### Form layout\n\nThe appropriate Bootstrap markup for the given `formLayout` and `controlType` is automatically generated to easily\ncreate forms without coding the default Bootstrap form markup by hand:\n\n```hbs\n{{#bs-form formLayout=\"horizontal\" onSubmit=(action \"submit\") as |form|}}\n{{form.element controlType=\"email\" label=\"Email\" placeholder=\"Email\" value=email}}\n{{form.element controlType=\"password\" label=\"Password\" placeholder=\"Password\" value=password}}\n{{form.element controlType=\"checkbox\" label=\"Remember me\" value=rememberMe}}\n{{bs-button defaultText=\"Submit\" type=\"primary\" buttonType=\"submit\"}}\n{{/bs-form}}\n```\n\n### Form validation\n\nIn the following example the control elements of the three form elements value will be bound to the properties\n(given by `property`) of the form's `model`, which in this case is its controller (see `model=this`):\n\n```hbs\n{{#bs-form formLayout=\"horizontal\" model=this onSubmit=(action \"submit\") as |form|}}\n{{form.element controlType=\"email\" label=\"Email\" placeholder=\"Email\" property=\"email\"}}\n{{form.element controlType=\"password\" label=\"Password\" placeholder=\"Password\" property=\"password\"}}\n{{form.element controlType=\"checkbox\" label=\"Remember me\" property=\"rememberMe\"}}\n{{bs-button defaultText=\"Submit\" type=\"primary\" buttonType=\"submit\"}}\n{{/bs-form}}\n```\n\nBy using this indirection in comparison to directly binding the `value` property, you get the benefit of automatic\nform validation, given that your `model` has a supported means of validating itself.\nSee [Components.Form](Components.Form.html) for details on how to enable form validation.\n\nIn the example above the `model` was our controller itself, so the control elements were bound to the appropriate\nproperties of our controller. A controller implementing validations on those properties could look like this:\n\n```js\nimport Ember from 'ember';\nimport EmberValidations from 'ember-validations';\n\nexport default Ember.Controller.extend(EmberValidations,{\n  email: null,\n  password: null,\n  rememberMe: false,\n  validations: {\n    email: {\n      presence: true,\n      format: {\n        with: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/\n      }\n    },\n    password: {\n      presence: true,\n      length: { minimum: 6, maximum: 10}\n    },\n    comments: {\n      length: { minimum: 5, maximum: 20}\n    }\n  }\n});\n```\n\nIf the `showValidation` property is `true` (which is automatically the case if a `focusOut` event is captured from the\ncontrol element or the containing `Components.Form` was submitted with its `model` failing validation) and there are\nvalidation errors for the `model`'s `property`, the appropriate Bootstrap validation markup (see\nhttp://getbootstrap.com/css/#forms-control-validation) is applied:\n\n* `validation` is set to 'error', which will set the `has-error` CSS class\n* the `errorIcon` feedback icon is displayed if `controlType` is a text field\n* the validation messages are displayed as Bootstrap `help-block`s in BS3 and `form-control-feedback` in BS4\n\nThe same applies for warning messages, if the used validation library supports this. (Currently only\n[ember-cp-validations](https://github.com/offirgolan/ember-cp-validations))\n\nAs soon as the validation is successful again...\n\n* `validation` is set to 'success', which will set the `has-success` CSS class\n* the `successIcon` feedback icon is displayed if `controlType` is a text field\n* the validation messages are removed\n\nIn case you want to display some error or warning message that is independent of the model's validation, for\nexample to display a failure message on a login form after a failed authentication attempt (so not coming from\nthe validation library), you can use the `customError` or `customWarning` properties to do so.\n\n### Custom controls\n\nApart from the standard built-in browser controls (see the `controlType` property), you can use any custom control simply\nby invoking the component with a block template. Use whatever control you might want, for example a select-2 component\n(from the [ember-select-2 addon](https://istefo.github.io/ember-select-2)):\n\n```hbs\n{{#bs-form model=this onSubmit=(action \"submit\") as |form|}}\n  {{#form.element label=\"Select-2\" property=\"gender\" useIcons=false as |el|}}\n    {{select-2 id=el.id content=genderChoices optionLabelPath=\"label\" value=el.value searchEnabled=false}}\n  {{/form.element}}\n{{/bs-form}}\n```\n\nThe component yields a hash with the following properties:\n* `control`: the component that would be used for rendering the form control based on the given `controlType`\n* `id`: id to be used for the form control, so it matches the labels `for` attribute\n* `value`: the value of the form element\n* `validation`: the validation state of the element, `null` if no validation is to be shown, otherwise 'success', 'error' or 'warning'\n\nIf your custom control does not render an input element, you should set `useIcons` to `false` since bootstrap only supports\nfeedback icons with textual `<input class=\"form-control\">` elements.\n\nIf you just want to customize the existing control component, you can use the aforementioned yielded `control` component\nto customize that existing component:\n\n```hbs\n{{#bs-form model=this onSubmit=(action \"submit\") as |form|}}\n  {{#form.element label=\"Email\" placeholder=\"Email\" property=\"email\" as |el|}}\n    {{el.control class=\"input-lg\"}}\n  {{/form.element}}\n{{/bs-form}}\n```\n\n### HTML attributes\n\nTo set HTML attributes on the control element provided by this component, set them as properties of this component:\n\n```hbs\n{{#bs-form formLayout=\"horizontal\" model=this onSubmit=(action \"submit\") as |form|}}\n{{form.element controlType=\"email\" label=\"Email\" property=\"email\"\n  placeholder=\"Email\"\n  required=true\n  multiple=true\n  tabIndex=5\n}}\n...\n{{/bs-form}}\n```\n\nThe following attributes are supported depending on the `controlType`:\n\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th></th>\n<th>textarea</th>\n<th>checkbox</th>\n<th>all others</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accept</td>\n<td></td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>autocomplete</td>\n<td>✔︎</td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>autofocus</td>\n<td>✔︎</td>\n<td>✔︎</td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>autosave</td>\n<td></td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>cols</td>\n<td>✔︎</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td></td>\n<td>✔︎</td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>form</td>\n<td>✔︎</td>\n<td>✔︎</td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>inputmode</td>\n<td></td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>max</td>\n<td></td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>maxlength</td>\n<td>✔︎</td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>min</td>\n<td></td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>minlength</td>\n<td>✔︎</td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td></td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>name</td>\n<td>✔︎</td>\n<td>✔︎</td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td></td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>✔︎</td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>readonly</td>\n<td>✔︎</td>\n<td>✔︎</td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>required</td>\n<td>✔︎</td>\n<td>✔︎</td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>rows</td>\n<td>✔︎</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>size<br>via <code>controlSize</code> property</td>\n<td></td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>spellcheck</td>\n<td>✔︎</td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>step</td>\n<td></td>\n<td></td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>tabindex</td>\n<td>✔︎</td>\n<td>✔︎</td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>title</td>\n<td>✔︎</td>\n<td>✔︎</td>\n<td>✔︎</td>\n</tr>\n<tr>\n<td>wrap</td>\n<td>✔︎</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>",
            "extends": "Components.FormGroup",
            "access": "public",
            "tagname": ""
        },
        "Components.FormGroup": {
            "name": "Components.FormGroup",
            "shortname": "Components.FormGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form/group.js",
            "line": 5,
            "description": "This component renders a `<div class=\"form-group\">` element, with support for validation states and feedback icons (only for BS3).\nYou can use it as a block level component. The following shows Bootstrap 3 usage for the internal markup.\n\n```hbs\n{{#bs-form as |form|}}\n  {{#form.group validation=firstNameValidation}}\n    <label class=\"control-label\">First name</label>\n    <input value={{firstname}} class=\"form-control\" oninput={{action (mut firstname) value=\"target.value\"}} type=\"text\">\n  {{/form.group}}\n{{/bs-form}}\n```\n\nIf the `validation` property is set to some state (usually Bootstrap's predefined states \"success\",\n\"warning\" or \"error\"), the appropriate styles will be added, together with a feedback icon.\nSee http://getbootstrap.com/css/#forms-control-validation",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.ModalHeaderClose": {
            "name": "Components.ModalHeaderClose",
            "shortname": "Components.ModalHeaderClose",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-modal/header/close.js",
            "line": 4,
            "extends": "Ember.Component",
            "access": "private",
            "tagname": ""
        },
        "Components.ModalHeaderTitle": {
            "name": "Components.ModalHeaderTitle",
            "shortname": "Components.ModalHeaderTitle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-modal/header/title.js",
            "line": 4,
            "extends": "Ember.Component",
            "access": "private",
            "tagname": ""
        },
        "Components.ModalBody": {
            "name": "Components.ModalBody",
            "shortname": "Components.ModalBody",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-modal/body.js",
            "line": 4,
            "description": "Modal body element used within [Components.Modal](Components.Modal.html) components. See there for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.ModalDialog": {
            "name": "Components.ModalDialog",
            "shortname": "Components.ModalDialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 8,
            "description": "Internal component for modal's markup and event handling. Should not be used directly.",
            "extends": "Ember.Component",
            "access": "private",
            "tagname": ""
        },
        "Components.ModalFooter": {
            "name": "Components.ModalFooter",
            "shortname": "Components.ModalFooter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-modal/footer.js",
            "line": 5,
            "description": "Modal footer element used within [Components.Modal](Components.Modal.html) components. See there for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.ModalHeader": {
            "name": "Components.ModalHeader",
            "shortname": "Components.ModalHeader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-modal/header.js",
            "line": 4,
            "description": "Modal header element used within [Components.Modal](Components.Modal.html) components. See there for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.NavItem": {
            "name": "Components.NavItem",
            "shortname": "Components.NavItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-nav/item.js",
            "line": 9,
            "description": "Component for each item within a [Components.Nav](Components.Nav.html) component. Have a look there for examples.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.ComponentParent"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.NavLinkTo": {
            "name": "Components.NavLinkTo",
            "shortname": "Components.NavLinkTo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-nav/link-to.js",
            "line": 4,
            "description": "Extended `{{link-to}}` component for use within Navs.",
            "extends": "Ember.LinkComponent",
            "uses": [
                "Mixins.ComponentChild"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.NavbarContent": {
            "name": "Components.NavbarContent",
            "shortname": "Components.NavbarContent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-navbar/content.js",
            "line": 4,
            "description": "Component to wrap the collapsible content of a [Components.Navbar](Components.Navbar.html) component.\nHave a look there for examples.",
            "extends": "Components.Collapse",
            "access": "public",
            "tagname": ""
        },
        "Components.NavbarLinkTo": {
            "name": "Components.NavbarLinkTo",
            "shortname": "Components.NavbarLinkTo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-navbar/link-to.js",
            "line": 3,
            "description": "Extended `{{link-to}}` component for use within Navbars.",
            "extends": "Components.NavLinkTo",
            "access": "public",
            "tagname": ""
        },
        "Components.NavbarNav": {
            "name": "Components.NavbarNav",
            "shortname": "Components.NavbarNav",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-navbar/nav.js",
            "line": 3,
            "description": "Component for the `.nav` element within a [Components.Navbar](Components.Navbar.html)\ncomponent. Have a look there for examples.\n\nPer [the bootstrap docs](http://getbootstrap.com/components/#navbar),\njustified navbar nav links are not supported.",
            "extends": "Components.Nav",
            "access": "public",
            "tagname": ""
        },
        "Components.NavbarToggle": {
            "name": "Components.NavbarToggle",
            "shortname": "Components.NavbarToggle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-navbar/toggle.js",
            "line": 4,
            "description": "Component to implement the responsive menu toggle behavior in a [Components.Navbar](Components.Navbar.html)\ncomponent. Have a look there for examples.\n\n### Bootstrap 3/4 Notes\n\nThe inline version of the component uses the triple `icon-bar` styling for Bootstrap 3 and the\n`navbar-toggler-icon` styling for Bootstrap 4.",
            "extends": "Components.Button",
            "access": "public",
            "tagname": ""
        },
        "Components.PopoverElement": {
            "name": "Components.PopoverElement",
            "shortname": "Components.PopoverElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-popover/element.js",
            "line": 5,
            "description": "Internal component for popover's markup. Should not be used directly.",
            "extends": "Components.ContextualHelpElement",
            "access": "private",
            "tagname": ""
        },
        "Components.ProgressBar": {
            "name": "Components.ProgressBar",
            "shortname": "Components.ProgressBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-progress/bar.js",
            "line": 8,
            "description": "Component for a single progress bar, see [Components.Progress](Components.Progress.html) for more examples.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TypeClass"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.TabPane": {
            "name": "Components.TabPane",
            "shortname": "Components.TabPane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-tab/pane.js",
            "line": 9,
            "description": "The tab pane of a tab component.\nSee [Components.Tab](Components.Tab.html) for examples.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.ComponentChild"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.TooltipElement": {
            "name": "Components.TooltipElement",
            "shortname": "Components.TooltipElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-tooltip/element.js",
            "line": 4,
            "description": "Internal component for tooltip's markup. Should not be used directly.",
            "extends": "Components.ContextualHelpElement",
            "access": "private",
            "tagname": ""
        },
        "Components.Accordion": {
            "name": "Components.Accordion",
            "shortname": "Components.Accordion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-accordion.js",
            "line": 5,
            "description": "Bootstrap-style [accordion group](http://getbootstrap.com/javascript/#collapse-example-accordion),\nwith collapsible/expandable items.\n\n### Usage\n\nUse as a block level component with any number of yielded [Components.AccordionItem](Components.AccordionItem.html)\ncomponents as children:\n\n```handlebars\n {{#bs-accordion as |acc|}}\n     {{#acc.item value=1 title=\"First item\"}}\n       <p>Lorem ipsum...</p>\n       <button {{action acc.change 2}}>Next</button>\n     {{/acc.item}}\n     {{#acc.item value=2 title=\"Second item\"}}\n       <p>Lorem ipsum...</p>\n     {{/acc.item}}\n     {{#acc.item value=3 title=\"Third item\"}}\n       <p>Lorem ipsum...</p>\n     {{/acc.item}}\n {{/bs-accordion}}\n```\n\nIn the example above the first accordion item utilizes the yielded `change` action to add some custom behaviour.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.Alert": {
            "name": "Components.Alert",
            "shortname": "Components.Alert",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-alert.js",
            "line": 10,
            "description": "Implements [Bootstrap alerts](http://getbootstrap.com/components/#alerts)\n\n### Usage\n\nBy default it is a user dismissible alert with a fade out animation, both of which can be disabled. Be sure to set the\n`type` property for proper styling.\n\n```hbs\n{{#bs-alert type=\"success\"}}\n<strong>Well done!</strong> You successfully read this important alert message.\n{{/bs-alert}}\n```",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TypeClass",
                "Mixins.TransitionSupport"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.ButtonGroup": {
            "name": "Components.ButtonGroup",
            "shortname": "Components.ButtonGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-button-group.js",
            "line": 8,
            "description": "Bootstrap-style button group, that visually groups buttons, and optionally adds radio/checkbox like behaviour.\nSee http://getbootstrap.com/components/#btn-groups\n\nUse as a block level component with any number of [Components.Button](Components.Button.html) components provided as\na yielded pre-configured contextual component:\n\n```handlebars\n{{#bs-button-group as |bg|}}\n  {{#bg.button}}1{{/bg.button}}\n  {{#bg.button}}2{{/s-bg.button}}\n  {{#bg.button}}3{{/bg.button}}\n{{/bs-button-group}}\n```\n\n### Radio-like behaviour\n\nUse the `type` property set to \"radio\" to make the child buttons toggle like radio buttons, i.e. only one button can be active.\nSet the `value` property of the buttons to something meaningful. The `value` property of the button group will then reflect\nthe value of the active button:\n\n```handlebars\n{{#bs-button-group value=buttonGroupValue type=\"radio\" onChange=(action (mut buttonGroupValue)) as |bg|}}\n  {{#bg.button type=\"default\" value=1}}1{{/bg.button}}\n  {{#bg.button type=\"default\" value=2}}2{{/bg.button}}\n  {{#bg.button type=\"default\" value=3}}3{{/bg.button}}\n{{/bs-button-group}}\n\nYou selected: {{buttonGroupValue}}!\n```\n\n### Checkbox-like behaviour\n\nSet `type` to \"checkbox\" to make any number of child buttons selectable. The `value` property will be an array\nof all the values of the active buttons:\n\n```handlebars\n{{#bs-button-group value=buttonGroupValue type=\"checkbox\" onChange=(action (mut buttonGroupValue)) as |bg|}}\n  {{#bg.button type=\"default\" value=1}}1{{/bg.button}}\n  {{#bg.button type=\"default\" value=2}}2{{/bg.button}}\n  {{#bg.button type=\"default\" value=3}}3{{/bg.button}}\n{{/bs-button-group}}\n\nYou selected:\n<ul>\n{{#each value in buttonGroupValue}}\n  <li>{{value}}</li>\n{{/each}}\n</ul>\n```",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.SizeClass"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Button": {
            "name": "Components.Button",
            "shortname": "Components.Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-button.js",
            "line": 8,
            "description": "Implements a HTML button element, with support for all [Bootstrap button CSS styles](http://getbootstrap.com/css/#buttons)\nas well as advanced functionality such as button states.\n\n### Basic Usage\n\n```hbs\n{{#bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\"}}\n  Downloads\n{{/bs-button}}\n```\n\n### Actions\n\nUse the `onClick` property of the component to send an action to your controller. It will receive the button's value\n(see the `value` property) as an argument.\n\n```hbs\n{{#bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\" onClick=(action \"download\")}}\n  Download\n{{/bs-button}}\n```\n\n### States\n\nUse the `textState` property to change the label of the button. You can bind it to a controller property to set a \"loading\" state for example.\nThe label of the button will be taken from the `<state>Text` property.\n\n```hbs\n{{bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\" textState=buttonState defaultText=\"Download\" loadingText=\"Loading...\" onClick=\"download\"}}\n```\n\n```js\nApp.ApplicationController = Ember.Controller.extend({\n  buttonState: \"default\"\n  actions: {\n    download: function() {\n      this.set(\"buttonState\", \"loading\");\n    }\n  }\n});\n```\n\n### Promise support for automatic state change\n\nWhen returning a Promise for any asynchronous operation from the `onClick` closure action the button will\nmanage an internal state (\"default\" > \"pending\" > \"resolved\"/\"rejected\") automatically, changing its label according to the state of the promise:\n\n```hbs\n{{bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\" defaultText=\"Download\" pendingText=\"Loading...\" resolvedText=\"Completed!\" rejectedText=\"Oups!?\" onClick=(action \"download\")}}\n```\n\n```js\n// controller.js\nexport default Ember.Controller.extend({\n  actions: {\n    download(value) {\n      return new Ember.RSVP.Promise(...);\n    }\n  }\n});\n```",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TypeClass",
                "Mixins.SizeClass"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Collapse": {
            "name": "Components.Collapse",
            "shortname": "Components.Collapse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-collapse.js",
            "line": 9,
            "description": "An Ember component that mimics the behaviour of [Bootstrap's collapse.js plugin](http://getbootstrap.com/javascript/#collapse)\n\n### Usage\n\n```hbs\n{{#bs-collapse collapsed=collapsed}}\n  <div class=\"well\">\n    <h2>Collapse</h2>\n    <p>This is collapsible content</p>\n  </div>\n{{/bs-collapse}}\n```",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.ContextualHelp": {
            "name": "Components.ContextualHelp",
            "shortname": "Components.ContextualHelp",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 20,
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TransitionSupport"
            ],
            "access": "private",
            "tagname": ""
        },
        "Components.Dropdown": {
            "name": "Components.Dropdown",
            "shortname": "Components.Dropdown",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-dropdown.js",
            "line": 6,
            "description": "Bootstrap style [dropdown menus](http://getbootstrap.com/components/#dropdowns), consisting\nof a toggle element, and the dropdown menu itself.\n\n### Usage\n\nUse this component together with the yielded contextual components:\n* [Components.DropdownToggle](Components.DropdownToggle.html)\n* [Components.DropdownButton](Components.DropdownButton.html)\n* [Components.DropdownMenu](Components.DropdownMenu.html)\n  * [Components.DropdownMenuItem](Components.DropdownMenuItem.html)\n  * [Components.DropdownMenuDivider](Components.DropdownMenuDivider.html)\n  * [Components.DropdownMenuLinkTo](Components.DropdownMenuLinkTo.html)\n\n```hbs\n{{#bs-dropdown as |dd|}}\n  {{#dd.toggle}}Dropdown <span class=\"caret\"></span>{{/dd.toggle}}\n  {{#dd.menu as |ddm|}}\n    {{#ddm.item}}\n      {{#ddm.link-to \"index\"}}Something{{/ddm.link-to}}\n    {{/ddm.item}}\n    {{ddm.divider}}\n    {{#ddm.item}}\n      {{#ddm.link-to \"index\"}}Something different{{/ddm.link-to}}\n    {{/ddm.item}}\n  {{/dd.menu}}\n{{/bs-dropdown}}\n```\n\nIf you need to use dropdowns in a [nav](Components.Nav.html), use the `bs-nav.dropdown`\ncontextual component rather than a standalone dropdown to ensure the correct styling\nregardless of your Bootstrap version.\n\n### Button dropdowns\n\nTo use a button as the dropdown toggle element (see http://getbootstrap.com/components/#btn-dropdowns), use the\n`Components.DropdownButton` component as the toggle:\n\n```hbs\n{{#bs-dropdown as |dd|}}\n  {{#dd.button}}Dropdown <span class=\"caret\"></span>{{/dd.button}}\n  {{#dd.menu as |ddm|}}\n      {{#ddm.item}}{{#ddm.link-to \"index\"}}Something{{/ddm.link-to}}{{/ddm.item}}\n      {{#ddm.item}}{{#ddm.link-to \"index\"}}Something different{{/ddm.link-to}}{{/ddm.item}}\n    {{/dd.menu}}\n{{/bs-dropdown}}\n```\n\nIt has all the functionality of a `Components.Button` with additional dropdown support.\n\n### Split button dropdowns\n\nTo have a regular button with a dropdown button as in http://getbootstrap.com/components/#btn-dropdowns-split, use a\n`Components.Button` component and a `Components.DropdownButton`:\n\n```hbs\n{{#bs-dropdown as |dd|}}\n  {{#bs-button}}Dropdown{{/bs-button}}\n  {{#dd.button}}Dropdown <span class=\"caret\"></span>{{/dd.button}}\n  {{#dd.menu as |ddm|}}\n    {{#ddm.item}}{{#ddm.link-to \"index\"}}Something{{/ddm.link-to}}{{/ddm.item}}\n    {{#ddm.item}}{{#ddm.link-to \"index\"}}Something different{{/ddm.link-to}}{{/ddm.item}}\n  {{/dd.menu}}\n  {{/bs-dropdown}}\n```\n\n### Dropup style\n\nSet the `direction` property to \"up\" to switch to a \"dropup\" style:\n\n```hbs\n{{#bs-dropdown direction=\"up\" as |dd|}}\n...\n{{/bs-dropdown}}\n```\n\n### Bootstrap 3/4 Notes\n\nIf you need to use dropdowns in a [nav](Components.Nav.html), use the `bs-nav.dropdown`\ncontextual component rather than a standalone dropdown to ensure the correct styling\nregardless of your Bootstrap version.\n\nIf you use the [dropdown divider](Component.DropdownMenuDivider), you don't have to worry\nabout differences in the markup between versions.\n\nBe sure to use the [dropdown menu link-to](Component.DropdownMenuLinkTo), for in-application\nlinks as dropdown menu items. This is essential for proper styling regardless of Bootstrap\nversion and will also provide automatic `active` highlighting on dropdown menu items. If you\nwish to have a dropdown menu item refer to an external link, be sure to apply the `dropdown-item`\nclass to the `<a>` tag for Bootstrap 4 compatibility.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.Form": {
            "name": "Components.Form",
            "shortname": "Components.Form",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-form.js",
            "line": 8,
            "description": "Render a form with the appropriate Bootstrap layout class (see `formLayout`).\nAllows setting a `model` that nested `Components.FormElement`s can access, and that can provide form validation (see below)\n\nYou can use whatever markup you like within the form. The following shows Bootstrap 3 usage for the internal markup.\n\n ```handlebars\n {{#bs-form onSubmit=(action \"submit\") as |form|}}\n   {{#form.group validation=firstNameValidation}}\n     <label class=\"control-label\">First name</label>\n     <input value={{firstname}} class=\"form-control\" oninput={{action (mut firstname) value=\"target.value\"}} type=\"text\">\n  {{/form.group}}\n{{/bs-form}}\n```\n\nHowever to benefit from features such as automatic form markup, validations and validation markup, use `Components.FormElement`\nas nested components. See below for an example.\n\n### Submitting the form\n\nWhen the form is submitted (e.g. by clicking a submit button), the event will be intercepted and the `onSubmit` action\nwill be sent to the controller or parent component.\nIn case the form supports validation (see \"Form validation\" below), the `onBefore` action is called (which allows you to\ndo e.g. model data normalization), then the available validation rules are evaluated, and if those fail, the `onInvalid`\naction is sent instead of `onSubmit`.\n\n### Use with Components.FormElement\n\nWhen using `Components.FormElement`s with their `property` set to property names of the form's validation enabled\n`model`, you gain some additional powerful features:\n* the appropriate Bootstrap markup for the given `formLayout` and the form element's `controlType` is automatically generated\n* markup for validation states and error messages is generated based on the model's validation (if available), when submitting the form\nwith an invalid validation, or when focusing out of invalid inputs\n\n```handlebars\n{{#bs-form formLayout=\"horizontal\" model=this onSubmit=(action \"submit\") as |form|}}\n  {{form.element controlType=\"email\" label=\"Email\" placeholder=\"Email\" property=\"email\"}}\n  {{form.element controlType=\"password\" label=\"Password\" placeholder=\"Password\" property=\"password\"}}\n  {{form.element controlType=\"checkbox\" label=\"Remember me\" property=\"rememberMe\"}}\n  {{bs-button defaultText=\"Submit\" type=\"primary\" buttonType=\"submit\"}}\n{{/bs-form}}\n```\n\nSee the [Components.FormElement](Components.FormElement.html) API docs for further information.\n\n### Form validation\n\nAll version of ember-bootstrap beginning from 0.7.0 do not come with built-in support for validation engines anymore.\nInstead support is added usually by additional Ember addons, for example:\n\n* [ember-bootstrap-validations](https://github.com/kaliber5/ember-bootstrap-validations): adds support for [ember-validations](https://github.com/DockYard/ember-validations)\n* [ember-bootstrap-cp-validations](https://github.com/offirgolan/ember-bootstrap-cp-validations): adds support for [ember-cp-validations](https://github.com/offirgolan/ember-cp-validations)\n* [ember-bootstrap-changeset-validations](https://github.com/kaliber5/ember-bootstrap-changeset-validations): adds support for [ember-changeset](https://github.com/poteto/ember-changeset)\n\nTo add your own validation support, you have to:\n\n* extend this component, setting `hasValidator` to true if validations are available (by means of a computed property for example), and implementing the `validate` method\n* extend the [Components.FormElement](Components.FormElement.html) component and implement the `setupValidations` hook or simply override the `errors` property to add the validation error messages to be displayed\n\nWhen validation fails, the appropriate Bootstrap markup is added automatically, i.e. the error classes are applied and\nthe validation messages are shown for each form element. In case the validation library supports it, also warning messages\nare shown. See the [Components.FormElement](Components.FormElement.html) documentation for further details.\n\nSee the above mentioned addons for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.ModalSimple": {
            "name": "Components.ModalSimple",
            "shortname": "Components.ModalSimple",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-modal-simple.js",
            "line": 4,
            "description": "Component for creating [Bootstrap modals](http://getbootstrap.com/javascript/#modals) with a some common default markup\n including a header, footer and body. Creating a simple modal is easy:\n```hbs\n {{#bs-modal-simple title=\"Simple Dialog\"}}\n   Hello world!\n {{/bs-modal-simple}}\n ```\nThis will automatically create the appropriate markup, with a modal header containing the title, and a footer containing\n a default \"Ok\" button, that will close the modal automatically (unless you return false from `onHide`).\nA modal created this way will be visible at once. You can use the `{{#if ...}}` helper to hide all modal elements from\n the DOM until needed. Or you can bind the `open` property to trigger showing and hiding the modal:\n```hbs\n {{#bs-modal-simple open=openModal title=\"Simple Dialog\"}}\n   Hello world!\n {{/bs-modal-simple}}\n ```\n### Custom Markup\nTo customize the markup within the modal you can use the [bs-modal](Components.Modal.html) component.\n### Modals with forms\nThere is a special case when you have a form inside your modals body: you probably do not want to have a submit button\n within your form but instead in your modal footer. Hover pressing the submit button outside of your form would not\n trigger the form data to be submitted. In the example below this would not trigger the submit action of the form, an\n thus bypass the form validation feature of the form component.\n```hbs\n {{#bs-modal-simple title=\"Form Example\" closeTitle=\"Cancel\" submitTitle=\"Ok\"}}\n   {{#bs-form onSubmit=(action \"submit\") model=this as |form|}}\n     {{form.element controlType=\"text\" label=\"first name\" property=\"firstname\"}}\n     {{form.element controlType=\"text\" label=\"last name\" property=\"lastname\"}}\n   {{/bs-form}}\n {{/bs-modal-simple}}\n ```\nThe modal component supports this common case by triggering the submit event programmatically on the body's form if\n present whenever the footer's submit button is pressed, so the example above will work as expected.\n### Auto-focus\nIn order to allow key handling to function, the modal's root element is given focus once the modal is shown. If your\n modal contains an element such as a text input and you would like it to be given focus rather than the modal element,\n then give it the HTML5 autofocus attribute:\n```hbs\n {{#bs-modal-simple title=\"Form Example\" closeTitle=\"Cancel\" submitTitle=\"Ok\"}}\n   {{#bs-form onSubmit=(action \"submit\") model=this as |form|}}\n     {{form.element controlType=\"text\" label=\"first name\" property=\"firstname\" autofocus=true}}\n     {{form.element controlType=\"text\" label=\"last name\" property=\"lastname\"}}\n   {{/bs-form}}\n {{/bs-modal-simple}}\n```\n### Modals inside wormhole\nModals make use of the [ember-wormhole](https://github.com/yapplabs/ember-wormhole) addon, which will be installed\n automatically alongside ember-bootstrap. This is used to allow the modal to be placed in deeply nested\n components/templates where it belongs to logically, but to have the actual DOM elements within a special container\n element, which is a child of ember's root element. This will make sure that modals always overlay the whole app, and\n are not effected by parent elements with `overflow: hidden` for example.\nIf you want the modal to render in place, rather than being wormholed, you can set renderInPlace=true.",
            "extends": "Components.Modal",
            "access": "public",
            "tagname": ""
        },
        "Components.Modal": {
            "name": "Components.Modal",
            "shortname": "Components.Modal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-modal.js",
            "line": 12,
            "description": "Component for creating [Bootstrap modals](http://getbootstrap.com/javascript/#modals) with custom markup.\n### Usage\n```hbs\n {{#bs-modal onSubmit=(action \"submit\") as |modal|}}\n   {{#modal.header}}\n     <h4 class=\"modal-title\"><i class=\"glyphicon glyphicon-alert\"></i> Alert</h4>\n   {{/modal.header}}\n   {{#modal.body}}Are you absolutely sure you want to do that???{{/modal.body}}\n   {{#modal.footer as |footer|}}\n     {{#bs-button onClick=(action modal.close) type=\"danger\"}}Oh no, forget it!{{/bs-button}}\n     {{#bs-button onClick=(action modal.submit) type=\"success\"}}Yeah!{{/bs-button}}\n   {{/modal.footer}}\n {{/bs-modal}}\n ```\nThe component yields references to the following contextual components, that you can use to further customize the output:\n* [modal.body](Components.ModalBody.html)\n * [modal.header](Components.ModalHeader.html)\n * [modal.footer](Components.ModalFooter.html)\nFurthermore references to the following actions are yielded:\n* `close`: triggers the `onHide` action and closes the modal\n * `submit`: triggers the `onSubmit` action (or the submit event on a form if present in the body element)\n### Further reading\nSee the documentation of the [bs-modal-simple](Components.ModalSimple.html) component for further examples.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TransitionSupport"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Nav": {
            "name": "Components.Nav",
            "shortname": "Components.Nav",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-nav.js",
            "line": 6,
            "description": "Component to generate [bootstrap navs](http://getbootstrap.com/components/#nav)\n### Usage\nUse in combination with the yielded components\n* [Components.NavItem](Components.NavItem.html)\n * [Components.NavLinkTo](Components.NavLinkTo.html)\n * [`nav.dropdown`](Components.Dropdown.html)\n```hbs\n {{#bs-nav type=\"pills\" as |nav|}}\n   {{#nav.item}}\n      {{#nav.link-to \"foo\"}}Foo{{/nav.link-to}}\n   {{/nav.item}}\n   {{#nav.item}}\n     {{#nav.link-to \"bar\"}}Bar{{/nav.link-to}}\n   {{/nav.item}}\n {{/bs-nav}}\n ```\n### Nav styles\nThe component supports the default bootstrap nav styling options \"pills\" and \"tabs\" through the `type`\n property, as well as the `justified` and `stacked` properties.\n### Active items\nBootstrap expects to have the `active` class on the `<li>` element that should be the active (highlighted)\n navigation item. To achieve that just use the `link-to` helper as usual. If the link is active, i.e\n it points to the current route, the `bs-nav-item` component will detect that and apply the `active` class\n automatically. The same applies for the `disabled` state.\n### Dropdowns\nUse the `nav.dropdown` contextual version of the [Components.Dropdown](Components.Dropdown.html) component\n with a `tagName` of \"li\" to integrate a dropdown into your nav:\n```hbs\n {{#bs-nav type=\"pills\" as |nav|}}\n   {{#nav.item}}{{#nav.link-to \"index\"}}Home{{/nav.link-to}}{{/nav.item}}\n   {{#nav.dropdown tagName=\"li\" as |dd|}}\n     {{#dd.toggle}}Dropdown <span class=\"caret\"></span>{{/dd.toggle}}\n     {{#dd.menu as |ddm|}}\n       {{#ddm.item}}{{#link-to \"foo\"}}Foo{{/link-to}}{{/ddm.item}}\n       {{#ddm.item}}{{#link-to \"bar\"}}Bar{{/link-to}}{{/ddm.item}}\n     {{/dd.menu}}\n   {{/nav.dropdown}}\n {{/bs-nav}}\n ```\n### Bootstrap 3/4 Notes\nUse [`nav.link-to`](Components.NavLinkTo.html) for in-app links to ensure proper styling regardless of\n Bootstrap version. Explicit use of `<a>` tags in Bootstrap 4 must apply the `nav-link` class and manage\n the `active` state explicitly.\nYou can override `tagName` if you want to use Bootstrap 4's ability to represent more structural\n components with `div` tags.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.Navbar": {
            "name": "Components.Navbar",
            "shortname": "Components.Navbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-navbar.js",
            "line": 7,
            "description": "Component to generate [Bootstrap navbars](http://getbootstrap.com/components/#navbar).\n\n### Usage\n\nUses the following components by a contextual reference:\n\n```hbs\n{{#bs-navbar as |navbar|}}\n  <div class=\"navbar-header\">\n    {{navbar.toggle}}\n    <a class=\"navbar-brand\" href=\"#\">Brand</a>\n  </div>\n  {{#navbar.content}}\n    {{#navbar.nav as |nav|}}\n      {{#nav.item}}\n        {{#nav.link-to \"home\"}}Home{{/nav.link-to}}\n      {{/nav.item}}\n      {{#nav.item}}\n        {{#nav.link-to \"navbars\"}}Navbars{{/nav.link-to}}\n      {{/nav.item}}\n    {{/navbar.nav}}\n  {{/navbar.content}}\n{{/bs-navbar}}\n```\n\nThe component yields references to the following contextual components:\n\n* [Components.NavbarContent](Components.NavbarContent.html)\n* [Components.NavbarToggle](Components.NavbarToggle.html)\n* [Components.NavbarNav](Components.NavbarNav.html)\n\nFurthermore references to the following actions are yielded:\n\n* `collapse`: triggers the `onCollapse` action and collapses the navbar (mobile)\n* `expand`: triggers the `onExpand` action and expands the navbar (mobile)\n\n### Responsive Design\n\nFor the mobile breakpoint the Bootstrap styles will hide the navbar content (`{{navbar.content}}`). Clicking on the\nnavbar toggle button (`{{navbar.toggle}}`) will expand the menu. By default all nav links (`{{nav.link-to}}`) are already\nwired up to call the navbar's `collapse` action, so clicking any of them will collapse the navbar. To selectively\nprevent that, you can set its `collapseNavbar` property to false:\n\n```hbs\n{{#nav.item}}\n  {{#nav.link-to \"index\" collapseNavbar=false}}Don't collapse{{/nav.link-to}}\n{{/nav.item}}\n```\n\nTo collapse the navbar when clicking on some nav items that are not internal links, you can use the yielded `collapse`\naction:\n\n```hbs\n{#bs-navbar as |navbar|}}\n  {{#navbar.content}}\n    {{#navbar.nav as |nav|}}\n      {{#nav.item}}\n        <a {{action navbar.collapse}}>Collapse</a>\n      {{/nav.item}}\n    {{/navbar.nav}}\n  {{/navbar.content}}\n{{/bs-navbar}}\n```\n\n### Navbar styles\n\nThe component supports the default bootstrap navbar styling options through the `type`\nproperty. Bootstrap navbars [do not currently support justified nav links](http://getbootstrap.com/components/#navbar-default),\nso those are explicitly disallowed.\n\nOther bootstrap navbar variations, such as forms, buttons, etc. can be supported through direct use of\nbootstrap styles applied through the `class` attribute on the components.\n\n### Bootstrap 3/4 Notes\n\nBootstrap 4 changed the default navbar styling option from `navbar-default` to `navbar-light`.\nIf you explicitly specified \"default\" in Bootstrap 3 and are migrating, you will need to change\nthis in your code. Bootstrap 4 changes `navbar-inverse` to `navbar-dark`.\n\nBootstrap 4 navbars are fluid by default without the need for an additional container. An\nadditional container is added like with Bootstrap 3 if `fluid` is `false`.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TypeClass"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Popover": {
            "name": "Components.Popover",
            "shortname": "Components.Popover",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-popover.js",
            "line": 5,
            "description": "Component that implements Bootstrap [popovers](http://getbootstrap.com/javascript/#popovers).\n\nBy default it will attach its listeners (click) to the parent DOM element to trigger\nthe popover:\n\n```hbs\n<button class=\"btn\">\n  {{#bs-popover title=\"This is a title\"}}and this the body{{/bs-popover}}\n</button>\n```\n\n### Trigger\n\nThe trigger element is the DOM element that will cause the popover to be shown when one of the trigger events occur on\nthat element. By default the trigger element is the parent DOM element of the component, and the trigger event will be\n\"click\".\n\nThe `triggerElement` property accepts any CSS selector to attach the popover to any other existing DOM element.\nWith the special value \"parentView\" you can attach the popover to the DOM element of the parent component:\n\n```hbs\n{{#my-component}}\n  {{#bs-popover triggerElement=\"parentView\"}}This is a popover{{/bs-popover}}\n{{/my-component}}\n```\n\nTo customize the events that will trigger the popover use the `triggerEvents` property, that accepts an array or a\nstring of events, with \"hover\", \"focus\" and \"click\" being supported.\n\n### Placement options\n\nBy default the popover will show up to the right of the trigger element. Use the `placement` property to change that\n(\"top\", \"bottom\", \"left\" and \"right\"). To make sure the popover will not exceed the viewport (see Advanced customization)\nyou can set `autoPlacement` to true. A popover with `placement=\"right\" will be placed to the right if there is enough\nspace, otherwise to the left.\n\n### Advanced customization\n\nSeveral other properties allow for some advanced customization:\n* `visible` to show/hide the popover programmatically\n* `fade` to disable the fade in transition\n* `delay` (or `delayShow` and `delayHide`) to add a delay\n* `viewportSelector` and `viewportPadding` to customize the viewport that affects `autoPlacement`\n\nSee the individual API docs for each property.\n\n### Actions\n\nWhen you want to react on the popover being shown or hidden, you can use one of the following supported actions:\n* `onShow`\n* `onShown`\n* `onHide`\n* `onHidden`",
            "extends": "Components.ContextualHelp",
            "access": "public",
            "tagname": ""
        },
        "Components.Progress": {
            "name": "Components.Progress",
            "shortname": "Components.Progress",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-progress.js",
            "line": 4,
            "description": "Component to display a Bootstrap progress bar, see http://getbootstrap.com/components/#progress.\n\n### Usage\n\nThe component yields a [Components.ProgressBar)(Components.ProgressBar.html) component that represents a single bar.\nUse the `value` property to control the progress bar's width. To apply the different styling options supplied by\nBootstrap, use the appropriate properties like `type`, `showLabel`, `striped` or `animate`.\n\n```hbs\n{{#bs-progress as |p|}}\n  {{p.bar value=progressValue minValue=0 maxValue=10 showLabel=true type=\"danger\"}}\n{{/bs-progress}}\n```\n\n### Stacked\n\nYou can place multiple progress bar components in a single progress component to\ncreate a stack of progress bars as seen in http://getbootstrap.com/components/#progress-stacked.\n\n```hbs\n{{#bs-progress as |p|}}\n  {{p.bar value=progressValue1 type=\"success\"}}\n  {{p.bar value=progressValue2 type=\"warning\"}}\n  {{p.bar value=progressValue3 type=\"danger\"}}\n{{/bs-progress}}\n```",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.Tab": {
            "name": "Components.Tab",
            "shortname": "Components.Tab",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-tab.js",
            "line": 11,
            "description": "Tab component for dynamic tab functionality that mimics the behaviour of Bootstrap's tab.js plugin,\nsee http://getbootstrap.com/javascript/#tabs\n\n### Usage\n\nJust nest any number of yielded [Components.TabPane](Components.TabPane.html) components that hold the tab content.\nThe tab navigation is automatically generated from the tab panes' `title` property:\n\n```hbs\n{{#bs-tab as |tab|}}\n  {{#tab.pane title=\"Tab 1\"}}\n    <p>...</p>\n  {{/tab.pane}}\n  {{#tab.pane title=\"Tab 2\"}}\n    <p>...</p>\n  {{/tab.pane}}\n{{/bs-tab}}\n```\n\n### Groupable (dropdown) tabs\n\nBootstrap's support for dropdown menus as tab navigation is mimiced by the use of the `groupTitle` property.\nAll panes with the same `groupTitle` will be put inside the menu of a [Components.Dropdown](Components.Dropdown.html)\ncomponent with `groupTitle` being the dropdown's title:\n\n```hbs\n{{#bs-tab as |tab|}}\n   {{#tab.pane title=\"Tab 1\"}}\n     <p>...</p>\n   {{/tab.pane}}\n   {{#tab.pane title=\"Tab 2\"}}\n     <p>...</p>\n   {{/tab.pane}}\n   {{#tab.pane title=\"Tab 3\" groupTitle=\"Dropdown\"}}\n     <p>...</p>\n   {{/tab.pane}}\n   {{#tab.pane title=\"Tab 4\" groupTitle=\"Dropdown\"}}\n     <p>...</p>\n   {{/tab.pane}}\n{{/bs-tab}}\n```\n\n### Custom tabs\n\nWhen having the tab pane's `title` as the tab navigation title is not sufficient, for example because you want to\nintegrate some other dynamic content, maybe even other components in the tab navigation item, then you have to setup\nyour navigation by yourself.\n\nSet `customTabs` to true to deactivate the automatic tab navigation generation. Then setup your navigation, probably\nusing a [Components.Nav](Components.Nav.html) component. The tab component yields the `activeId` property as well as\nits `select` action, which you would have to use to manually set the `active` state of the navigation items and to\ntrigger the selection of the different tab panes, using their ids:\n\n```hbs\n{{#bs-tab customTabs=true as |tab|}}\n   {{#bs-nav type=\"tabs\" as |nav|}}\n       {{#nav.item active=(bs-eq tab.activeId \"pane1\")}}<a href=\"#pane1\" role=\"tab\" {{action tab.select \"pane1\"}}>Tab 1</a>{{/nav.item}}\n       {{#nav.item active=(bs-eq tab.activeId \"pane2\")}}<a href=\"#pane1\" role=\"tab\" {{action tab.select \"pane2\"}}>Tab 2 <span class=\"badge\">{{badge}}</span></a>{{/nav.item}}\n   {{/bs-nav}}\n\n   <div class=\"tab-content\">\n   {{#tab.pane elementId=\"pane1\" title=\"Tab 1\"}}\n       <p>...</p>\n   {{/tab.pane}}\n   {{#tab.pane elementId=\"pane2\" title=\"Tab 2\"}}\n       <p>...</p>\n   {{/tab.pane}}\n   </div>\n{{/bs-tab}}\n```\n\nNote that the `bs-eq` helper used in the example above is a private helper, which is not guaranteed to be available for\nthe future. Better use the corresponding `eq` helper of the\n[ember-truth-helpers](https://github.com/jmurphyau/ember-truth-helpers) addon for example!\n\n### Routable tabs\n\nThe tab component purpose is to have panes of content, that are all in DOM at the same time and that are activated and\ndeactivated dynamically, just as the  original Bootstrap implementation.\n\nIf you want to have the content delivered through individual sub routes, just use\nthe [Components.Nav](Components.Nav.html) component and an `{{outlet}}` that show the nested routes' content:\n\n```hbs\n<div>\n  {{#bs-nav type=\"tabs\" as |nav|}}\n    {{#nav.item}}{{#nav.link-to \"tabs.index\"}}Tab 1{{/nav.link-to}}{{/nav.item}}\n    {{#nav.item}}{{#nav.link-to \"tabs.other\"}}Tab 2{{/nav.link-to}}{{/nav.item}}\n  {{/bs-nav}}\n  {{outlet}}\n</div>\n```",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.ComponentParent"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Tooltip": {
            "name": "Components.Tooltip",
            "shortname": "Components.Tooltip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/base/bs-tooltip.js",
            "line": 5,
            "description": "Component that implements Bootstrap [tooltips](http://getbootstrap.com/javascript/#tooltips).\n\nBy default it will attach its listeners (mouseover and focus) to the parent DOM element to trigger\nthe tooltip:\n\n```hbs\n<button class=\"btn\">\n  {{bs-tooltip title=\"This is a tooltip\"}}\n</button>\n```\n\nYou can also use the component in a block form to set the title:\n\n```hbs\n<button class=\"btn\">\n  {{#bs-tooltip}}This is a tooltip{{/bs-tooltip}}\n</button>\n```\n\n### Trigger\n\nThe trigger element is the DOM element that will cause the tooltip to be shown when one of the trigger events occur on\nthat element. By default the trigger element is the parent DOM element of the component, and the trigger events will be\n\"hover\" and \"focus\".\n\nThe `triggerElement` property accepts any CSS selector to attach the tooltip to any other existing DOM element.\nWith the special value \"parentView\" you can attach the tooltip to the DOM element of the parent component:\n\n```hbs\n{{#my-component}}\n  {{bs-tooltip title=\"This is a tooltip\" triggerElement=\"parentView\"}}\n{{/my-component}}\n```\n\nTo customize the events that will trigger the tooltip use the `triggerEvents` property, that accepts an array or a\nstring of events, with \"hover\", \"focus\" and \"click\" being supported.\n\n### Placement options\n\nBy default the tooltip will show up on top of the trigger element. Use the `placement` property to change that\n(\"top\", \"bottom\", \"left\" and \"right\"). To make sure the tooltip will not exceed the viewport (see Advanced customization)\nyou can set `autoPlacement` to true. A tooltip with `placement=\"right\" will be placed to the right if there is enough\nspace, otherwise to the left.\n\n### Advanced customization\n\nSeveral other properties allow for some advanced customization:\n* `visible` to show/hide the tooltip programmatically\n* `fade` to disable the fade in transition\n* `delay` (or `delayShow` and `delayHide`) to add a delay\n* `viewportSelector` and `viewportPadding` to customize the viewport that affects `autoPlacement`\n\nSee the individual API docs for each property.\n\n### Actions\n\nWhen you want to react on the tooltip being shown or hidden, you can use one of the following supported actions:\n* `onShow`\n* `onShown`\n* `onHide`\n* `onHidden`",
            "extends": "Components.ContextualHelp",
            "access": "public",
            "tagname": ""
        },
        "Mixins.ComponentChild": {
            "name": "Mixins.ComponentChild",
            "shortname": "Mixins.ComponentChild",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.NavLinkTo",
                "Components.TabPane"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/component-child.js",
            "line": 5,
            "description": "Mixin for components that act as a child component in a parent-child relationship of components",
            "access": "private",
            "tagname": ""
        },
        "Mixins.ComponentParent": {
            "name": "Mixins.ComponentParent",
            "shortname": "Mixins.ComponentParent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.NavItem",
                "Components.Tab"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/component-parent.js",
            "line": 5,
            "description": "Mixin for components that act as a parent component in a parent-child relationship of components",
            "access": "private",
            "tagname": ""
        },
        "Mixins.ControlAttributes": {
            "name": "Mixins.ControlAttributes",
            "shortname": "Mixins.ControlAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Mixins",
            "file": "addon/mixins/control-attributes.js",
            "line": 3,
            "description": "Mixin for control components to add standard HTML attributes",
            "access": "private",
            "tagname": ""
        },
        "Mixins.ControlValidation": {
            "name": "Mixins.ControlValidation",
            "shortname": "Mixins.ControlValidation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Mixins",
            "file": "addon/mixins/control-validation.js",
            "line": 4,
            "description": "Mixin for BS4 validation styles added to form controls",
            "access": "private",
            "tagname": ""
        },
        "Mixins.DropdownToggle": {
            "name": "Mixins.DropdownToggle",
            "shortname": "Mixins.DropdownToggle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.DropdownButton",
                "Components.DropdownToggle"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/dropdown-toggle.js",
            "line": 4,
            "description": "Mixin for components that act as dropdown toggles.",
            "access": "private",
            "tagname": ""
        },
        "Mixins.SizeClass": {
            "name": "Mixins.SizeClass",
            "shortname": "Mixins.SizeClass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.ButtonGroup",
                "Components.Button"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/size-class.js",
            "line": 5,
            "description": "Mixin to set the appropriate class for components with different sizes.",
            "access": "private",
            "tagname": ""
        },
        "Mixins.SubComponent": {
            "name": "Mixins.SubComponent",
            "shortname": "Mixins.SubComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Mixins",
            "file": "addon/mixins/sub-component.js",
            "line": 4,
            "deprecated": true,
            "access": "private",
            "tagname": ""
        },
        "Mixins.TransitionSupport": {
            "name": "Mixins.TransitionSupport",
            "shortname": "Mixins.TransitionSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.Alert",
                "Components.ContextualHelp",
                "Components.Modal"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/transition-support.js",
            "line": 7,
            "description": "Mixin for components that support transitions",
            "access": "private",
            "tagname": ""
        },
        "Mixins.TypeClass": {
            "name": "Mixins.TypeClass",
            "shortname": "Mixins.TypeClass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.AccordionItem",
                "Components.ProgressBar",
                "Components.Alert",
                "Components.Button",
                "Components.Navbar"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/type-class.js",
            "line": 4,
            "description": "Mixin to set the appropriate class for components with differently styled types (\"success\", \"danger\" etc.)",
            "access": "private",
            "tagname": ""
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "addon/components/base/bs-accordion/item/body.js",
            "line": 18,
            "itemtype": "property",
            "name": "collapsed",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.AccordionBody",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion/item/title.js",
            "line": 19,
            "itemtype": "property",
            "name": "collapsed",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.AccordionTitle",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion/item/title.js",
            "line": 26,
            "itemtype": "event",
            "name": "onClick",
            "access": "public",
            "tagname": "",
            "class": "Components.AccordionTitle",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion/item.js",
            "line": 21,
            "description": "The title of the accordion item, displayed as a .panel-title element",
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.AccordionItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion/item.js",
            "line": 30,
            "description": "The value of the accordion item, which is used as the value of the `selected` property of the parent [Components.Accordion](Components.Accordion.html) component",
            "itemtype": "property",
            "name": "value",
            "access": "public",
            "tagname": "",
            "class": "Components.AccordionItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion/item.js",
            "line": 38,
            "itemtype": "property",
            "name": "selected",
            "access": "private",
            "tagname": "",
            "class": "Components.AccordionItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion/item.js",
            "line": 44,
            "itemtype": "property",
            "name": "collapsed",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.AccordionItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion/item.js",
            "line": 54,
            "itemtype": "property",
            "name": "active",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.AccordionItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion/item.js",
            "line": 62,
            "description": "Reference to the parent `Components.Accordion` class.",
            "itemtype": "property",
            "name": "accordion",
            "access": "private",
            "tagname": "",
            "class": "Components.AccordionItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion/item.js",
            "line": 70,
            "itemtype": "event",
            "name": "onClick",
            "access": "public",
            "tagname": "",
            "class": "Components.AccordionItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button-group/button.js",
            "line": 15,
            "itemtype": "property",
            "name": "groupValue",
            "access": "private",
            "tagname": "",
            "class": "Components.ButtonGroupButton",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button-group/button.js",
            "line": 21,
            "itemtype": "property",
            "name": "buttonGroupType",
            "type": "string",
            "access": "private",
            "tagname": "",
            "class": "Components.ButtonGroupButton",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button-group/button.js",
            "line": 28,
            "itemtype": "property",
            "name": "active",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.ButtonGroupButton",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 21,
            "itemtype": "property",
            "name": "placement",
            "type": "string",
            "default": "'top'",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 31,
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 39,
            "itemtype": "property",
            "name": "showHelp",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 47,
            "description": "If true component will render in place, rather than be wormholed.",
            "itemtype": "property",
            "name": "renderInPlace",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 57,
            "description": "Which element to align to",
            "itemtype": "property",
            "name": "popperTarget",
            "type": "{string|HTMLElement}",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 66,
            "itemtype": "property",
            "name": "autoPlacement",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 74,
            "description": "The DOM element of the viewport element.",
            "itemtype": "property",
            "name": "viewportElement",
            "type": "object",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 83,
            "description": "Take a padding into account for keeping the tooltip/popover within the bounds of the element given by `viewportElement`.",
            "itemtype": "property",
            "name": "viewportPadding",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 93,
            "itemtype": "property",
            "name": "arrowClass",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 99,
            "itemtype": "property",
            "name": "popperClassNames",
            "type": "{array}",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 106,
            "itemtype": "property",
            "name": "popperClass",
            "type": "{string}",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help/element.js",
            "line": 120,
            "description": "popper.js modifier config",
            "itemtype": "property",
            "name": "popperModifiers",
            "type": "{object}",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelpElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown/menu.js",
            "line": 18,
            "description": "Defaults to a `<ul>` tag in BS3 and a '<div>' tag in BS4. Change for other types of dropdown menus.",
            "itemtype": "property",
            "name": "tagName",
            "type": "string",
            "default": "ul",
            "access": "public",
            "tagname": "",
            "class": "Components.DropdownMenu",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown/menu.js",
            "line": 27,
            "itemtype": "property",
            "name": "ariaRole",
            "default": "menu",
            "type": "string",
            "access": "protected",
            "tagname": "",
            "class": "Components.DropdownMenu",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown/menu.js",
            "line": 35,
            "description": "Alignment of the menu, either \"left\" or \"right\"",
            "itemtype": "property",
            "name": "align",
            "type": "string",
            "default": "left",
            "access": "public",
            "tagname": "",
            "class": "Components.DropdownMenu",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown/menu.js",
            "line": 45,
            "itemtype": "property",
            "name": "direction",
            "default": "'down'",
            "type": "string",
            "access": "private",
            "tagname": "",
            "class": "Components.DropdownMenu",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown/menu.js",
            "line": 53,
            "itemtype": "property",
            "name": "inNav",
            "type": "{boolean}",
            "access": "private",
            "tagname": "",
            "class": "Components.DropdownMenu",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown/toggle.js",
            "line": 18,
            "description": "Defaults to a `<a>` tag. Change for other types of dropdown toggles.",
            "itemtype": "property",
            "name": "tagName",
            "type": "string",
            "default": "a",
            "access": "public",
            "tagname": "",
            "class": "Components.DropdownToggle",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown/toggle.js",
            "line": 30,
            "itemtype": "property",
            "name": "inNav",
            "type": "{boolean}",
            "access": "private",
            "tagname": "",
            "class": "Components.DropdownToggle",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown/toggle.js",
            "line": 37,
            "description": "Computed property to generate a `href=\"#\"` attribute when `tagName` is \"a\".",
            "itemtype": "property",
            "name": "href",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.DropdownToggle",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown/toggle.js",
            "line": 51,
            "description": "When clicking the toggle this action is called.",
            "itemtype": "event",
            "name": "onClick",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.DropdownToggle",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/control/checkbox.js",
            "line": 17,
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElementControlCheckbox",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/control/input.js",
            "line": 32,
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementControlInput",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/layout/horizontal.js",
            "line": 17,
            "description": "The Bootstrap grid class for form labels within a horizontal layout form.",
            "itemtype": "property",
            "name": "horizontalLabelGridClass",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLayoutHorizontal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/layout/horizontal.js",
            "line": 26,
            "description": "Computed property that specifies the Bootstrap grid class for form controls within a horizontal layout form.",
            "itemtype": "property",
            "name": "horizontalInputGridClass",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElementLayoutHorizontal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/layout/horizontal.js",
            "line": 44,
            "description": "Computed property that specifies the Bootstrap offset grid class for form controls within a horizontal layout\nform, that have no label.",
            "itemtype": "property",
            "name": "horizontalInputOffsetGridClass",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElementLayoutHorizontal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/control.js",
            "line": 12,
            "itemtype": "property",
            "name": "value",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementControl",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/control.js",
            "line": 18,
            "itemtype": "property",
            "name": "ariaDescribedBy",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementControl",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/control.js",
            "line": 25,
            "description": "This action is called whenever the `value` changes",
            "itemtype": "event",
            "name": "onChange",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementControl",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/errors.js",
            "line": 15,
            "itemtype": "property",
            "name": "show",
            "type": "{Boolean}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementErrors",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/errors.js",
            "line": 22,
            "itemtype": "property",
            "name": "messages",
            "type": "{Ember.Array}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementErrors",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/feedback-icon.js",
            "line": 15,
            "itemtype": "property",
            "name": "show",
            "type": "{Boolean}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementFeedbackIcon",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/feedback-icon.js",
            "line": 22,
            "itemtype": "property",
            "name": "iconName",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementFeedbackIcon",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/help-text.js",
            "line": 14,
            "itemtype": "property",
            "name": "text",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementHelpText",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/label.js",
            "line": 16,
            "itemtype": "property",
            "name": "label",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLabel",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/label.js",
            "line": 23,
            "itemtype": "property",
            "name": "invisibleLabel",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLabel",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/label.js",
            "line": 30,
            "itemtype": "property",
            "name": "formElementId",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLabel",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/label.js",
            "line": 37,
            "itemtype": "property",
            "name": "labelClass",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLabel",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/label.js",
            "line": 44,
            "description": "The form layout used for the markup generation (see http://getbootstrap.com/css/#forms):\n\n* 'horizontal'\n* 'vertical'\n* 'inline'\n\nDefaults to the parent `form`'s `formLayout` property.",
            "itemtype": "property",
            "name": "formLayout",
            "type": "string",
            "default": "'vertical'",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLabel",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/label.js",
            "line": 60,
            "description": "The type of the control widget.\nSupported types:\n\n* 'text'\n* 'checkbox'\n* 'textarea'\n* any other type will use an input tag with the `controlType` value as the type attribute (for e.g. HTML5 input\ntypes like 'email'), and the same layout as the 'text' type",
            "itemtype": "property",
            "name": "controlType",
            "type": "string",
            "default": "'text'",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLabel",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/label.js",
            "line": 77,
            "description": "Indicates whether the type of the control widget equals `checkbox`",
            "itemtype": "property",
            "name": "isCheckbox",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElementLabel",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/label.js",
            "line": 86,
            "description": "Indicates whether the form type equals `horizontal`",
            "itemtype": "property",
            "name": "isHorizontal",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElementLabel",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/layout.js",
            "line": 13,
            "itemtype": "property",
            "name": "formElementId",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLayout",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/layout.js",
            "line": 20,
            "itemtype": "property",
            "name": "hasLabel",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLayout",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/layout.js",
            "line": 27,
            "itemtype": "property",
            "name": "errorsComponent",
            "type": "{Ember.Component}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLayout",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/layout.js",
            "line": 34,
            "itemtype": "property",
            "name": "feedbackIconComponent",
            "type": "{Ember.Component}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLayout",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/layout.js",
            "line": 41,
            "itemtype": "property",
            "name": "labelComponent",
            "type": "{Ember.Component}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLayout",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element/layout.js",
            "line": 48,
            "itemtype": "property",
            "name": "helpTextComponent",
            "type": "{Ember.Component}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElementLayout",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 332,
            "description": "Text to display within a `<label>` tag.\n\nYou should include a label for every form input cause otherwise screen readers\nwill have trouble with your forms. Use `invisibleLabel` property if you want\nto hide them.",
            "itemtype": "property",
            "name": "label",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 345,
            "description": "Controls label visibility by adding 'sr-only' class.",
            "itemtype": "property",
            "name": "invisibleLabel",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 355,
            "itemtype": "property",
            "name": "hasLabel",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 363,
            "description": "The type of the control widget.\nSupported types:\n\n* 'text'\n* 'checkbox'\n* 'textarea'\n* any other type will use an input tag with the `controlType` value as the type attribute (for e.g. HTML5 input\ntypes like 'email'), and the same layout as the 'text' type",
            "itemtype": "property",
            "name": "controlType",
            "type": "string",
            "default": "'text'",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 380,
            "description": "The value of the control element is bound to this property. You can bind it to some controller property to\nget/set the control element's value:\n\n```hbs\n{{form.element controlType=\"email\" label=\"Email\" placeholder=\"Email\" value=email}}\n```\n\nNote: you lose the ability to validate this form element by directly binding to its value. It is recommended\nto use the `property` feature instead.",
            "itemtype": "property",
            "name": "value",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 397,
            "description": "The property name of the form element's `model` (by default the `model` of its parent `Components.Form`) that this\nform element should represent. The control element's value will automatically be bound to the model property's\nvalue.\n\nUsing this property enables form validation on this element.",
            "itemtype": "property",
            "name": "property",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 410,
            "description": "The model used for validation. Defaults to the parent `Components.Form`'s `model`",
            "itemtype": "property",
            "name": "model",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 418,
            "description": "Show a help text next to the control",
            "itemtype": "property",
            "name": "helpText",
            "type": "{string}",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 427,
            "itemtype": "property",
            "name": "hasHelpText",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 435,
            "description": "The array of error messages from the `model`'s validation.",
            "itemtype": "property",
            "name": "errors",
            "type": "array",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 444,
            "itemtype": "property",
            "name": "hasErrors",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 452,
            "description": "The array of warning messages from the `model`'s validation.",
            "itemtype": "property",
            "name": "errors",
            "type": "array",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 461,
            "itemtype": "property",
            "name": "hasWarnings",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 469,
            "description": "Show a custom error message that does not come from the model's validation. Will be immediately shown, regardless\nof any user interaction (i.e. no `focusOut` event required)",
            "itemtype": "property",
            "name": "customError",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 479,
            "itemtype": "property",
            "name": "hasCustomError",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 487,
            "description": "Show a custom warning message that does not come from the model's validation. Will be immediately shown, regardless\nof any user interaction (i.e. no `focusOut` event required). If the model's validation has an error then the error\nwill be shown in place of this warning.",
            "itemtype": "property",
            "name": "customWarning",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 498,
            "itemtype": "property",
            "name": "hasCustomWarning",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 506,
            "description": "Property for size styling, set to 'lg', 'sm' or 'xs' (the latter only for BS3)",
            "itemtype": "property",
            "name": "size",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 515,
            "description": "The array of validation messages (either errors or warnings) from either custom error/warnings or , if we are showing model validation messages, the model's validation",
            "itemtype": "property",
            "name": "validationMessages",
            "type": "array",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 538,
            "itemtype": "property",
            "name": "hasValidationMessages",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 546,
            "itemtype": "property",
            "name": "hasValidator",
            "type": "boolean",
            "default": "false",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 554,
            "description": "Set a validating state for async validations",
            "itemtype": "property",
            "name": "isValidating",
            "type": "boolean",
            "default": "false",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 564,
            "description": "If `true` form validation markup is rendered (requires a validatable `model`).",
            "itemtype": "property",
            "name": "showValidation",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 574,
            "itemtype": "property",
            "name": "showOwnValidation",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 582,
            "itemtype": "property",
            "name": "showAllValidations",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 590,
            "itemtype": "property",
            "name": "showModelValidations",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 598,
            "itemtype": "property",
            "name": "showValidationMessages",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 606,
            "description": "Event or list of events which enable form validation markup rendering.\nSupported events: ['focusOut', 'change', 'input']",
            "itemtype": "property",
            "name": "showValidationOn",
            "type": "string|array",
            "default": "['focusOut']",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 617,
            "itemtype": "property",
            "name": "_showValidationOn",
            "type": "array",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 637,
            "itemtype": "method",
            "name": "showValidationOnHandler",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 647,
            "description": "The validation (\"error\" (BS3)/\"danger\" (BS4), \"warning\", or \"success\") or null if no validation is to be shown. Automatically computed from the\nmodels validation state.",
            "itemtype": "property",
            "name": "validation",
            "readonly": "",
            "type": "string",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 668,
            "description": "True for text field `controlType`s",
            "itemtype": "property",
            "name": "useIcons",
            "type": "boolean",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 678,
            "description": "The form layout used for the markup generation (see http://getbootstrap.com/css/#forms):\n\n* 'horizontal'\n* 'vertical'\n* 'inline'\n\nDefaults to the parent `form`'s `formLayout` property.",
            "itemtype": "property",
            "name": "formLayout",
            "type": "string",
            "default": "'vertical'",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 694,
            "description": "The Bootstrap grid class for form labels within a horizontal layout form. Defaults to the value of the same\nproperty of the parent form. The corresponding grid class for form controls is automatically computed.",
            "itemtype": "property",
            "name": "horizontalLabelGridClass",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 704,
            "description": "ID for input field and the corresponding label's \"for\" attribute",
            "itemtype": "property",
            "name": "formElementId",
            "type": "string",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 715,
            "description": "ID of the helpText, used for aria-describedby attribute of the control element",
            "itemtype": "property",
            "name": "ariaDescribedBy",
            "type": "string",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 726,
            "itemtype": "property",
            "name": "layoutComponent",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 742,
            "itemtype": "property",
            "name": "controlComponent",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 758,
            "itemtype": "property",
            "name": "errorsComponent",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 765,
            "itemtype": "property",
            "name": "feedbackIconComponent",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 772,
            "itemtype": "property",
            "name": "labelComponent",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 779,
            "itemtype": "property",
            "name": "helpTextComponent",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 786,
            "description": "Setup validation properties. This method acts as a hook for external validation\nlibraries to overwrite. In case of failed validations the `errors` property should contain an array of error messages.",
            "itemtype": "method",
            "name": "setupValidations",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 796,
            "description": "Listen for focusOut events from the control element to automatically set `showOwnValidation` to true to enable\nform validation markup rendering if `showValidationsOn` contains `focusOut`.",
            "itemtype": "event",
            "name": "focusOut",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 807,
            "description": "Listen for change events from the control element to automatically set `showOwnValidation` to true to enable\nform validation markup rendering if `showValidationsOn` contains `change`.",
            "itemtype": "event",
            "name": "change",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 818,
            "description": "Listen for input events from the control element to automatically set `showOwnValidation` to true to enable\nform validation markup rendering if `showValidationsOn` contains `input`.",
            "itemtype": "event",
            "name": "input",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/element.js",
            "line": 829,
            "description": "The action is called whenever the input value is changed, e.g. by typing text",
            "itemtype": "event",
            "name": "onChange",
            "params": [
                {
                    "name": "value",
                    "description": "The new value of the form control",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "The form element's model",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The value of `property`",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/group.js",
            "line": 30,
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "String",
            "default": "'form-group' (BS3) or 'form-control' (BS4)",
            "access": "private",
            "tagname": "",
            "class": "Components.FormGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/group.js",
            "line": 37,
            "description": "Computed property which is true if the form group is in a validation state",
            "itemtype": "property",
            "name": "hasValidation",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "Components.FormGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form/group.js",
            "line": 47,
            "description": "Set to a validation state to render the form-group with a validation style (only for BS3).\nSee http://getbootstrap.com/css/#forms-control-validation\n\nThe default states of \"success\", \"warning\" and \"error\" are supported by Bootstrap out-of-the-box.\nBut you can use custom states as well. This will set a has-<state> class, and (if `useIcons`is true)\na feedback whose class is taken from the <state>Icon property",
            "itemtype": "property",
            "name": "validation",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/header/close.js",
            "line": 19,
            "itemtype": "event",
            "name": "onClick",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalHeaderClose",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 24,
            "description": "Set to false to disable fade animations.",
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 34,
            "description": "Used to apply Bootstrap's visibility classes",
            "itemtype": "property",
            "name": "showModal",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 44,
            "description": "Render modal markup?",
            "itemtype": "property",
            "name": "inDom",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 54,
            "itemtype": "property",
            "name": "paddingLeft",
            "type": "number|null",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 62,
            "itemtype": "property",
            "name": "paddingRight",
            "type": "number|null",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 70,
            "description": "Closes the modal when escape key is pressed.",
            "itemtype": "property",
            "name": "keyboard",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 80,
            "description": "Property for size styling, set to null (default), 'lg' or 'sm'\n\nAlso see the [Bootstrap docs](http://getbootstrap.com/javascript/#modals-sizes)",
            "itemtype": "property",
            "name": "size",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 91,
            "description": "If true clicking on the backdrop will close the modal.",
            "itemtype": "property",
            "name": "backdropClose",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 101,
            "itemtype": "property",
            "name": "style",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 124,
            "description": "Name of the size class",
            "itemtype": "property",
            "name": "sizeClass",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/dialog.js",
            "line": 137,
            "itemtype": "event",
            "name": "onClose",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/footer.js",
            "line": 19,
            "description": "The title of the default close button. Will be ignored (i.e. no close button) if you provide your own block\ntemplate.",
            "itemtype": "property",
            "name": "closeTitle",
            "type": "string",
            "default": "'Ok'",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalFooter",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/footer.js",
            "line": 30,
            "description": "The title of the submit button (primary button). Will be ignored (i.e. no button) if set to null or if you provide\nyour own block template.",
            "itemtype": "property",
            "name": "submitTitle",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalFooter",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/footer.js",
            "line": 43,
            "description": "Set to true to disable the submit button. If you bind this to some property that indicates if submitting is allowed\n(form validation for example) this can be used to prevent the user from pressing the submit button.",
            "itemtype": "property",
            "name": "submitDisabled",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalFooter",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/footer.js",
            "line": 54,
            "description": "The type of the submit button (primary button).",
            "itemtype": "property",
            "name": "submitButtonType",
            "type": "string",
            "default": "'primary'",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalFooter",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/footer.js",
            "line": 64,
            "description": "The action to send to the parent modal component when the modal footer's form is submitted",
            "itemtype": "event",
            "name": "onSubmit",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalFooter",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/footer.js",
            "line": 72,
            "itemtype": "event",
            "name": "onClose",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalFooter",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/header.js",
            "line": 17,
            "description": "Show a close button (x icon)",
            "itemtype": "property",
            "name": "closeButton",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalHeader",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/header.js",
            "line": 27,
            "description": "The title to display in the modal header",
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalHeader",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal/header.js",
            "line": 37,
            "itemtype": "event",
            "name": "onClose",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalHeader",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-nav/item.js",
            "line": 25,
            "description": "Render the nav item as disabled (see [Bootstrap docs](http://getbootstrap.com/components/#nav-disabled-links)).\nBy default it will look at any nested `link-to` components and make itself disabled if there is a disabled link.\nSee the [link-to API](http://emberjs.com/api/classes/Ember.Templates.helpers.html#toc_disabling-the-code-link-to-code-component)",
            "itemtype": "property",
            "name": "disabled",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.NavItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-nav/item.js",
            "line": 37,
            "description": "Render the nav item as active.\nBy default it will look at any nested `link-to` components and make itself active if there is an active link\n(i.e. the link points to the current route).\nSee the [link-to API](http://emberjs.com/api/classes/Ember.Templates.helpers.html#toc_handling-current-route)",
            "itemtype": "property",
            "name": "active",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.NavItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-nav/item.js",
            "line": 50,
            "description": "Collection of all `Ember.LinkComponent`s that are children",
            "itemtype": "property",
            "name": "childLinks",
            "access": "private",
            "tagname": "",
            "class": "Components.NavItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-nav/item.js",
            "line": 66,
            "description": "Called when clicking the nav item",
            "itemtype": "event",
            "name": "onClick",
            "access": "public",
            "tagname": "",
            "class": "Components.NavItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar/link-to.js",
            "line": 13,
            "itemtype": "property",
            "name": "collapseNavbar",
            "type": "{Boolean}",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.NavbarLinkTo",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar/link-to.js",
            "line": 21,
            "itemtype": "event",
            "name": "onCollapse",
            "access": "private",
            "tagname": "",
            "class": "Components.NavbarLinkTo",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar/toggle.js",
            "line": 24,
            "description": "Bootstrap 4 Only: Defines the alignment of the toggler. Valid values are 'left' and 'right'\nto set the `navbar-toggler-*` class.",
            "itemtype": "property",
            "name": "align",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.NavbarToggle",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-popover/element.js",
            "line": 16,
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.PopoverElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-popover/element.js",
            "line": 23,
            "itemtype": "property",
            "name": "hasTitle",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.PopoverElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-progress/bar.js",
            "line": 25,
            "description": "The lower limit of the value range",
            "itemtype": "property",
            "name": "minValue",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-progress/bar.js",
            "line": 35,
            "description": "The upper limit of the value range",
            "itemtype": "property",
            "name": "maxValue",
            "type": "number",
            "default": "100",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-progress/bar.js",
            "line": 45,
            "description": "The value the progress bar should represent",
            "itemtype": "property",
            "name": "value",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-progress/bar.js",
            "line": 55,
            "description": "If true a label will be shown inside the progress bar.\n\nBy default it will be the percentage corresponding to the `value` property, rounded to `roundDigits` digits.\nYou can customize it by using the component with a block template, which the component yields the percentage\nvalue to:\n\n```hbs\n{{#bs-progress}}\n  {{#bs-progress-bar value=progressValue as |percent|}}{{progressValue}} ({{percent}}%){{/bs-progress-bar}}\n{{/bs-progress}}\n```",
            "itemtype": "property",
            "name": "showLabel",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-progress/bar.js",
            "line": 75,
            "description": "Create a striped effect, see http://getbootstrap.com/components/#progress-striped",
            "itemtype": "property",
            "name": "striped",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-progress/bar.js",
            "line": 85,
            "description": "Animate the stripes, see http://getbootstrap.com/components/#progress-animated",
            "itemtype": "property",
            "name": "animate",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-progress/bar.js",
            "line": 95,
            "description": "Specify to how many digits the progress bar label should be rounded.",
            "itemtype": "property",
            "name": "roundDigits",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-progress/bar.js",
            "line": 112,
            "description": "The percentage of `value`",
            "itemtype": "property",
            "name": "percent",
            "type": "number",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-progress/bar.js",
            "line": 128,
            "description": "The percentage of `value`, rounded to `roundDigits` digits",
            "itemtype": "property",
            "name": "percentRounded",
            "type": "number",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-progress/bar.js",
            "line": 141,
            "itemtype": "property",
            "name": "style",
            "type": "string",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab/pane.js",
            "line": 25,
            "itemtype": "property",
            "name": "activeId",
            "access": "private",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab/pane.js",
            "line": 31,
            "description": "True if this pane is active (visible)",
            "itemtype": "property",
            "name": "isActive",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab/pane.js",
            "line": 43,
            "description": "Used to apply Bootstrap's \"active\" class",
            "itemtype": "property",
            "name": "active",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab/pane.js",
            "line": 53,
            "description": "Used to trigger the Bootstrap visibility classes.",
            "itemtype": "property",
            "name": "showContent",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab/pane.js",
            "line": 63,
            "description": "The title for this tab pane. This is used by the `bs-tab` component to automatically generate\nthe tab navigation.\nSee the [Components.Tab](Components.Tab.html) for examples.",
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab/pane.js",
            "line": 75,
            "description": "An optional group title used by the `bs-tab` component to group all panes with the same group title\nunder a common drop down in the tab navigation.\nSee the [Components.Tab](Components.Tab.html) for examples.",
            "itemtype": "property",
            "name": "groupTitle",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab/pane.js",
            "line": 87,
            "description": "Use fade animation when switching tabs.",
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab/pane.js",
            "line": 96,
            "description": "The duration of the fade out animation",
            "itemtype": "property",
            "name": "fadeDuration",
            "type": "integer",
            "default": "150",
            "access": "private",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab/pane.js",
            "line": 106,
            "description": "Show the pane",
            "itemtype": "method",
            "name": "show",
            "access": "protected",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab/pane.js",
            "line": 127,
            "description": "Hide the pane",
            "itemtype": "method",
            "name": "hide",
            "access": "protected",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion.js",
            "line": 40,
            "description": "The value of the currently selected accordion item. Set this to change selection programmatically.\n\nWhen the selection is changed by user interaction this property will not update by using two-way bindings in order\nto follow DDAU best practices. If you want to react to such changes, subscribe to the `onChange` action",
            "itemtype": "property",
            "name": "selected",
            "access": "public",
            "tagname": "",
            "class": "Components.Accordion",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion.js",
            "line": 51,
            "description": "The value of the currently selected accordion item",
            "itemtype": "property",
            "name": "isSelected",
            "access": "private",
            "tagname": "",
            "class": "Components.Accordion",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-accordion.js",
            "line": 59,
            "description": "Action when the selected accordion item is about to be changed.\n\nYou can return false to prevent changing the active item, and do that in your action by\nsetting the `selected` accordingly.",
            "itemtype": "event",
            "name": "onChange",
            "params": [
                {
                    "name": "newValue",
                    "description": ""
                },
                {
                    "name": "oldValue",
                    "description": ""
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.Accordion",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 35,
            "description": "A dismissible alert will have a close button in the upper right corner, that the user can click to dismiss\nthe alert.",
            "itemtype": "property",
            "name": "dismissible",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 46,
            "description": "If true the alert is completely hidden. Will be set when the fade animation has finished.",
            "itemtype": "property",
            "name": "hidden",
            "type": "boolean",
            "default": "false",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 57,
            "description": "This property controls if the alert should be visible. If false it might still be in the DOM until the fade animation\nhas completed.\n\nWhen the alert is dismissed by user interaction this property will not update by using two-way bindings in order\nto follow DDAU best practices. If you want to react to such changes, subscribe to the `onDismiss` action",
            "itemtype": "property",
            "name": "visible",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 71,
            "itemtype": "property",
            "name": "_visible",
            "access": "private",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 77,
            "itemtype": "property",
            "name": "notVisible",
            "access": "private",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 83,
            "description": "Set to false to disable the fade out animation when hiding the alert.",
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 93,
            "description": "Computed property to set the alert class to the component div. Will be false when dismissed to have the component\ndiv (which cannot be removed form DOM by the component itself) without any markup.",
            "itemtype": "property",
            "name": "alert",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 104,
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "String",
            "default": "'alert'",
            "access": "private",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 112,
            "description": "The duration of the fade out animation",
            "itemtype": "property",
            "name": "fadeDuration",
            "type": "number",
            "default": "150",
            "access": "public",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 122,
            "description": "The action to be sent after the alert has been dismissed (including the CSS transition).",
            "itemtype": "event",
            "name": "onDismissed",
            "access": "public",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 130,
            "description": "The action is called when the close button is clicked.\n\nYou can return false to prevent closing the alert automatically, and do that in your action by\nsetting `visible` to false.",
            "itemtype": "event",
            "name": "onDismiss",
            "access": "public",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 149,
            "description": "Call to make the alert visible again after it has been hidden",
            "itemtype": "method",
            "name": "show",
            "access": "private",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-alert.js",
            "line": 159,
            "description": "Call to hide the alert. If the `fade` property is true, this will fade out the alert before being finally\ndismissed.",
            "itemtype": "method",
            "name": "hide",
            "access": "private",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button-group.js",
            "line": 70,
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "String",
            "default": "'btn-group'",
            "access": "protected",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button-group.js",
            "line": 78,
            "description": "Set to true for a vertically stacked button group, see http://getbootstrap.com/components/#btn-groups-vertical",
            "itemtype": "property",
            "name": "vertical",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button-group.js",
            "line": 88,
            "description": "Set to true for the buttons to stretch at equal sizes to span the entire width of its parent.\n\n*Important*: You have to wrap every button component in a `div class=\"btn-group\">`:\n\n```handlebars\n<div class=\"btn-group\" role=\"group\">\n{{#bs-button}}My Button{{/bs-button}}\n</div>\n```\n\nSee http://getbootstrap.com/components/#btn-groups-justified",
            "itemtype": "property",
            "name": "justified",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button-group.js",
            "line": 108,
            "description": "The type of the button group specifies how child buttons behave and how the `value` property will be computed:\n\n### null\nIf `type` is not set (null), the button group will add no functionality besides Bootstrap styling\n\n### radio\nif `type` is set to \"radio\", the buttons will behave like radio buttons:\n* the `value` property of the button group will reflect the `value` property of the active button\n* thus only one button may be active\n\n### checkbox\nif `type` is set to \"checkbox\", the buttons will behave like checkboxes:\n* any number of buttons may be active\n* the `value` property of the button group will be an array containing the `value` properties of all active buttons",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button-group.js",
            "line": 131,
            "description": "The value of the button group, computed by its child buttons.\nSee the `type` property for how the value property is constructed.\n\nWhen you set the value, the corresponding buttons will be activated:\n* use a single value for a radio button group to activate the button with the same value\n* use an array of values for a checkbox button group to activate all the buttons with values contained in the array",
            "itemtype": "property",
            "name": "value",
            "type": "array",
            "access": "public",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button-group.js",
            "line": 145,
            "itemtype": "property",
            "name": "isRadio",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button-group.js",
            "line": 152,
            "description": "This action is called whenever the button group's value should be changed because the user clicked a button.\nYou will receive the new value of the button group (based on the `type` property), which you should use to update the\n`value` property.",
            "itemtype": "event",
            "name": "onChange",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 84,
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "String",
            "default": "'btn'",
            "access": "private",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 94,
            "description": "Default label of the button. Not need if used as a block component",
            "itemtype": "property",
            "name": "defaultText",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 103,
            "description": "Property to disable the button",
            "itemtype": "property",
            "name": "disabled",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 113,
            "description": "Set the type of the button, either 'button' or 'submit'",
            "itemtype": "property",
            "name": "buttonType",
            "type": "String",
            "default": "'button'",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 123,
            "description": "Set the 'active' class to apply active/pressed CSS styling",
            "itemtype": "property",
            "name": "active",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 133,
            "description": "Property for block level buttons\n\nSee the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)",
            "itemtype": "property",
            "name": "block",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 144,
            "description": "A click event on a button will not bubble up the DOM tree if it has an `onClick` action handler. Set to true to\nenable the event to bubble",
            "itemtype": "property",
            "name": "bubble",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 155,
            "description": "If button is active and this is set, the icon property will match this property",
            "itemtype": "property",
            "name": "iconActive",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 164,
            "description": "If button is inactive and this is set, the icon property will match this property",
            "itemtype": "property",
            "name": "iconInactive",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 173,
            "description": "Class(es) (e.g. glyphicons or font awesome) to use as a button icon\nThis will render a <i class=\"{{icon}}\"></i> element in front of the button's label",
            "itemtype": "property",
            "name": "icon",
            "type": "String",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 190,
            "description": "Supply a value that will be associated with this button. This will be send\nas a parameter of the default action triggered when clicking the button",
            "itemtype": "property",
            "name": "value",
            "type": "any",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 200,
            "description": "State of the button. The button's label (if not used as a block component) will be set to the\n`<state>Text` property.\nThis property will automatically be set when using a click action that supplies the callback with an promise",
            "itemtype": "property",
            "name": "textState",
            "type": "String",
            "default": "'default'",
            "access": "protected",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 212,
            "description": "Set this to true to reset the state. A typical use case is to bind this attribute with ember-data isDirty flag.",
            "itemtype": "property",
            "name": "reset",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 221,
            "description": "The HTML title attribute",
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 230,
            "description": "When clicking the button this action is called with the value of the button (that is the value of the \"value\" property).\nReturn a promise object, and the buttons state will automatically set to \"pending\", \"resolved\" and/or \"rejected\".\n\nThe click event will not bubble up, unless you set `bubble` to true.",
            "itemtype": "event",
            "name": "onClick",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 242,
            "description": "This will reset the state property to 'default', and with that the button's label to defaultText",
            "itemtype": "method",
            "name": "resetState",
            "access": "protected",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-button.js",
            "line": 264,
            "itemtype": "method",
            "name": "click",
            "access": "private",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 33,
            "description": "Collapsed/expanded state",
            "itemtype": "property",
            "name": "collapsed",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 43,
            "description": "True if this item is expanded",
            "itemtype": "property",
            "name": "active",
            "access": "private",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 55,
            "description": "true if the component is currently transitioning",
            "itemtype": "property",
            "name": "transitioning",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 64,
            "itemtype": "property",
            "name": "collapseSize",
            "type": "number",
            "access": "private",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 71,
            "description": "The size of the element when collapsed. Defaults to 0.",
            "itemtype": "property",
            "name": "collapsedSize",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 81,
            "description": "The size of the element when expanded. When null the value is calculated automatically to fit the containing elements.",
            "itemtype": "property",
            "name": "expandedSize",
            "type": "number",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 91,
            "description": "Usually the size (height) of the element is only set while transitioning, and reseted afterwards. Set to true to always set a size.",
            "itemtype": "property",
            "name": "resetSizeWhenNotCollapsing",
            "type": "boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 101,
            "description": "The direction (height/width) of the collapse animation.\nWhen setting this to 'width' you should also define custom CSS transitions for the width property, as the Bootstrap\nCSS does only support collapsible elements for the height direction.",
            "itemtype": "property",
            "name": "collapseDimension",
            "type": "string",
            "default": "'height'",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 113,
            "description": "The duration of the fade transition",
            "itemtype": "property",
            "name": "transitionDuration",
            "type": "number",
            "default": "350",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 132,
            "description": "The action to be sent when the element is about to be hidden.",
            "itemtype": "event",
            "name": "onHide",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 140,
            "description": "The action to be sent after the element has been completely hidden (including the CSS transition).",
            "itemtype": "event",
            "name": "onHidden",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 148,
            "description": "The action to be sent when the element is about to be shown.",
            "itemtype": "event",
            "name": "onShow",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 156,
            "description": "The action to be sent after the element has been completely shown (including the CSS transition).",
            "itemtype": "event",
            "name": "onShown",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 164,
            "description": "Triggers the show transition",
            "itemtype": "method",
            "name": "show",
            "access": "protected",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 199,
            "description": "Get the size of the element when expanded",
            "itemtype": "method",
            "name": "getExpandedSize",
            "params": [
                {
                    "name": "action",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-collapse.js",
            "line": 219,
            "description": "Triggers the hide transition",
            "itemtype": "method",
            "name": "hide",
            "access": "protected",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 31,
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 38,
            "description": "How to position the tooltip/popover - top | bottom | left | right | auto",
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "default": "'top'",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 48,
            "description": "When `true` it will dynamically reorient the tooltip/popover. For example, if `placement` is \"left\", the\ntooltip/popover will display to the left when possible, otherwise it will display right.",
            "itemtype": "property",
            "name": "autoPlacement",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 59,
            "description": "You can programmatically show the tooltip/popover by setting this to `true`",
            "itemtype": "property",
            "name": "visible",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 69,
            "itemtype": "property",
            "name": "inDom",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 76,
            "description": "Set to false to disable fade animations.",
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 86,
            "description": "Used to apply Bootstrap's visibility class",
            "itemtype": "property",
            "name": "showHelp",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 96,
            "description": "Delay showing and hiding the tooltip/popover (ms). Individual delays for showing and hiding can be specified by using the\n`delayShow` and `delayHide` properties.",
            "itemtype": "property",
            "name": "delay",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 107,
            "description": "Delay showing the tooltip/popover. This property overrides the general delay set with the `delay` property.",
            "itemtype": "property",
            "name": "delayShow",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 117,
            "description": "Delay hiding the tooltip/popover. This property overrides the general delay set with the `delay` property.",
            "itemtype": "property",
            "name": "delayHide",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 130,
            "description": "The duration of the fade transition",
            "itemtype": "property",
            "name": "transitionDuration",
            "type": "number",
            "default": "150",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 140,
            "description": "Keeps the tooltip/popover within the bounds of this element when `autoPlacement` is true. Can be any valid CSS selector.",
            "itemtype": "property",
            "name": "viewportSelector",
            "type": "string",
            "default": "'body'",
            "see": [
                "viewportPadding",
                "autoPlacement"
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 152,
            "description": "Take a padding into account for keeping the tooltip/popover within the bounds of the element given by `viewportSelector`.",
            "itemtype": "property",
            "name": "viewportPadding",
            "type": "number",
            "default": "0",
            "see": [
                "viewportSelector",
                "autoPlacement"
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 164,
            "description": "The id of the overlay element.",
            "itemtype": "property",
            "name": "overlayId",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 176,
            "description": "The DOM element of the overlay element.",
            "itemtype": "property",
            "name": "overlayElement",
            "type": "object",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 188,
            "description": "The DOM element of the arrow element.",
            "itemtype": "property",
            "name": "arrowElement",
            "type": "object",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 198,
            "description": "The DOM element of the viewport element.",
            "itemtype": "property",
            "name": "viewportElement",
            "type": "object",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 210,
            "description": "The DOM element that triggers the tooltip/popover. By default it is the parent element of this component.\nYou can set this to any CSS selector to have any other element trigger the tooltip/popover.\nWith the special value of \"parentView\" you can attach the tooltip/popover to the parent component's element.",
            "itemtype": "property",
            "name": "triggerElement",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 221,
            "itemtype": "property",
            "name": "triggerTargetElement",
            "type": "{object}",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 245,
            "description": "The event(s) that should trigger the tooltip/popover - click | hover | focus.\nYou can set this to a single event or multiple events, given as an array or a string separated by spaces.",
            "itemtype": "property",
            "name": "triggerEvents",
            "type": "array|string",
            "default": "'hover focus'",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 274,
            "description": "If true component will render in place, rather than be wormholed.",
            "itemtype": "property",
            "name": "renderInPlace",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 284,
            "itemtype": "property",
            "name": "_renderInPlace",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 293,
            "description": "Current hover state, 'in', 'out' or null",
            "itemtype": "property",
            "name": "hoverState",
            "type": "string",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 302,
            "description": "Current state for events",
            "itemtype": "property",
            "name": "inState",
            "type": "{InState}",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 313,
            "description": "Ember.run timer",
            "itemtype": "property",
            "name": "timer",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 321,
            "description": "This action is called immediately when the tooltip/popover is about to be shown.",
            "itemtype": "event",
            "name": "onShow",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 330,
            "description": "This action will be called when the tooltip/popover has been made visible to the user (will wait for CSS transitions to complete).",
            "itemtype": "event",
            "name": "onShown",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 339,
            "description": "This action is called immediately when the tooltip/popover is about to be hidden.",
            "itemtype": "event",
            "name": "onHide",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 348,
            "description": "This action is called when the tooltip/popover has finished being hidden from the user (will wait for CSS transitions to complete).",
            "itemtype": "event",
            "name": "onHidden",
            "access": "public",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 357,
            "description": "Called when a show event has been received",
            "itemtype": "method",
            "name": "enter",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 390,
            "description": "Called when a hide event has been received",
            "itemtype": "method",
            "name": "leave",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 422,
            "description": "Called for a click event",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 446,
            "description": "Show the tooltip/popover",
            "itemtype": "method",
            "name": "show",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 495,
            "description": "Position the tooltip/popover's arrow",
            "itemtype": "method",
            "name": "replaceArrow",
            "params": [
                {
                    "name": "delta",
                    "description": ""
                },
                {
                    "name": "dimension",
                    "description": ""
                },
                {
                    "name": "isVertical",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 510,
            "description": "Hide the tooltip/popover",
            "itemtype": "method",
            "name": "hide",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 546,
            "itemtype": "method",
            "name": "addListeners",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-contextual-help.js",
            "line": 565,
            "itemtype": "method",
            "name": "removeListeners",
            "access": "private",
            "tagname": "",
            "class": "Components.ContextualHelp",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown.js",
            "line": 106,
            "description": "This property reflects the state of the dropdown, whether it is open or closed.",
            "itemtype": "property",
            "name": "isOpen",
            "default": "false",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown.js",
            "line": 116,
            "description": "By default clicking on an open dropdown menu will close it. Set this property to false for the menu to stay open.",
            "itemtype": "property",
            "name": "closeOnMenuClick",
            "default": "true",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown.js",
            "line": 126,
            "description": "By default the dropdown menu will expand downwards. Set to 'up' to expand upwards.",
            "itemtype": "property",
            "name": "direction",
            "type": "string",
            "default": "'down'",
            "access": "public",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown.js",
            "line": 136,
            "description": "Indicates the dropdown is being used as a navigation item dropdown.",
            "itemtype": "property",
            "name": "inNav",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown.js",
            "line": 146,
            "description": "A computed property to generate the suiting class for the dropdown container, either \"dropdown\", \"dropup\" or \"btn-group\".",
            "itemtype": "property",
            "name": "containerClass",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown.js",
            "line": 162,
            "itemtype": "property",
            "name": "menuElement",
            "access": "private",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown.js",
            "line": 170,
            "itemtype": "property",
            "name": "toggleElement",
            "access": "private",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown.js",
            "line": 178,
            "description": "Reference to the child toggle (Toggle or Button)",
            "itemtype": "property",
            "name": "toggle",
            "access": "private",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown.js",
            "line": 186,
            "description": "Action is called when dropdown is about to be shown",
            "itemtype": "event",
            "name": "onShow",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown.js",
            "line": 195,
            "description": "Action is called when dropdown is about to be hidden",
            "itemtype": "event",
            "name": "onHide",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-dropdown.js",
            "line": 245,
            "description": "Handler for click events to close the dropdown",
            "itemtype": "method",
            "name": "closeOnClickHandler",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 85,
            "description": "Bootstrap form class name (computed)",
            "itemtype": "property",
            "name": "layoutClass",
            "type": "string",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 95,
            "description": "Set a model that this form should represent. This serves several purposes:\n\n* child `Components.FormElement`s can access and bind to this model by their `property`\n* when the model supports validation by using the [ember-validations](https://github.com/dockyard/ember-validations) mixin,\nchild `Components.FormElement`s will look at the validation information of their `property` and render their form group accordingly.\nMoreover the form's `submit` event handler will validate the model and deny submitting if the model is not validated successfully.",
            "itemtype": "property",
            "name": "model",
            "type": "Ember.Object",
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 109,
            "description": "Set the layout of the form to either \"vertical\", \"horizontal\" or \"inline\". See http://getbootstrap.com/css/#forms-inline and http://getbootstrap.com/css/#forms-horizontal",
            "itemtype": "property",
            "name": "formLayout",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 118,
            "description": "Check if validating the model is supported. This needs to be implemented by another addon.",
            "itemtype": "property",
            "name": "hasValidator",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 128,
            "description": "The Bootstrap grid class for form labels. This is used by the `Components.FormElement` class as a default for the\nwhole form.",
            "itemtype": "property",
            "name": "horizontalLabelGridClass",
            "type": "string",
            "default": "'col-md-4'",
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 139,
            "description": "If set to true pressing enter will submit the form, even if no submit button is present",
            "itemtype": "property",
            "name": "submitOnEnter",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 149,
            "description": "If set to true novalidate attribute is present on form element",
            "itemtype": "property",
            "name": "novalidate",
            "type": "boolean",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 163,
            "description": "Validate hook which will return a promise that will either resolve if the model is valid\nor reject if it's not. This should be overridden to add validation support.",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 174,
            "itemtype": "property",
            "name": "showAllValidations",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 182,
            "description": "Action is called before the form is validated (if possible) and submitted.",
            "itemtype": "event",
            "name": "onBefore",
            "params": [
                {
                    "name": "model",
                    "description": "The form's `model`",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 191,
            "description": "Action is called when submit has been triggered and the model has passed all validations (if present).",
            "itemtype": "event",
            "name": "onSubmit",
            "params": [
                {
                    "name": "model",
                    "description": "The form's `model`",
                    "type": "Object"
                },
                {
                    "name": "result",
                    "description": "The returned result from the validate method, if validation is available",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 201,
            "description": "Action is called when validation of the model has failed.",
            "itemtype": "event",
            "name": "onInvalid",
            "params": [
                {
                    "name": "model",
                    "description": "The form's `model`",
                    "type": "Object"
                },
                {
                    "name": "error",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-form.js",
            "line": 211,
            "description": "Submit handler that will send the default action (\"action\") to the controller when submitting the form.\n\nIf there is a supplied `model` that supports validation (`hasValidator`) the model will be validated before, and\nonly if validation is successful the default action will be sent. Otherwise an \"invalid\" action will be sent, and\nall the `showValidation` property of all child `Components.FormElement`s will be set to true, so error state and\nmessages will be shown automatically.",
            "itemtype": "method",
            "name": "submit",
            "access": "private",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal-simple.js",
            "line": 84,
            "description": "The title of the modal, visible in the modal header. Is ignored if `header` is false.",
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalSimple",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal-simple.js",
            "line": 93,
            "description": "Display a close button (x icon) in the corner of the modal header.",
            "itemtype": "property",
            "name": "closeButton",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalSimple",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal-simple.js",
            "line": 103,
            "description": "The title of the default close button.",
            "itemtype": "property",
            "name": "closeTitle",
            "type": "string",
            "default": "'Ok'",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalSimple",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal-simple.js",
            "line": 113,
            "description": "The type of the submit button (primary button).",
            "itemtype": "property",
            "name": "submitButtonType",
            "type": "string",
            "default": "'primary'",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalSimple",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal-simple.js",
            "line": 123,
            "description": "The title of the submit button (primary button). Will be ignored (i.e. no button) if set to null.",
            "itemtype": "property",
            "name": "submitTitle",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalSimple",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 55,
            "description": "Visibility of the modal. Toggle to show/hide with CSS transitions.\n\nWhen the modal is closed by user interaction this property will not update by using two-way bindings in order\nto follow DDAU best practices. If you want to react to such changes, subscribe to the `onHide` action",
            "itemtype": "property",
            "name": "open",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 68,
            "itemtype": "property",
            "name": "isOpen",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 74,
            "itemtype": "property",
            "name": "_isOpen",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 80,
            "description": "Set to false to disable fade animations.",
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 90,
            "itemtype": "property",
            "name": "notFade",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 97,
            "description": "Used to apply Bootstrap's visibility classes.",
            "itemtype": "property",
            "name": "showModal",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 107,
            "description": "Render modal markup?",
            "itemtype": "property",
            "name": "inDom",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 117,
            "itemtype": "property",
            "name": "paddingLeft",
            "type": "number|null",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 125,
            "itemtype": "property",
            "name": "paddingRight",
            "type": "number|null",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 133,
            "description": "Use a semi-transparent modal background to hide the rest of the page.",
            "itemtype": "property",
            "name": "backdrop",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 143,
            "itemtype": "property",
            "name": "showBackdrop",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 151,
            "description": "Closes the modal when escape key is pressed.",
            "itemtype": "property",
            "name": "keyboard",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 161,
            "description": "The id of the `.modal` element.",
            "itemtype": "property",
            "name": "modalId",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 173,
            "description": "The DOM element of the `.modal` element.",
            "itemtype": "property",
            "name": "modalElement",
            "type": "object",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 185,
            "description": "The id of the backdrop element.",
            "itemtype": "property",
            "name": "backdropId",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 197,
            "description": "The DOM elemnt of the backdrop element.",
            "itemtype": "property",
            "name": "backdropElement",
            "type": "object",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 209,
            "description": "Property for size styling, set to null (default), 'lg' or 'sm'\n\nAlso see the [Bootstrap docs](http://getbootstrap.com/javascript/#modals-sizes)",
            "itemtype": "property",
            "name": "size",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 220,
            "description": "If true clicking on the backdrop will close the modal.",
            "itemtype": "property",
            "name": "backdropClose",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 230,
            "description": "If true component will render in place, rather than be wormholed.",
            "itemtype": "property",
            "name": "renderInPlace",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 240,
            "itemtype": "property",
            "name": "_renderInPlace",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 249,
            "description": "The duration of the fade transition",
            "itemtype": "property",
            "name": "transitionDuration",
            "type": "number",
            "default": "300",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 259,
            "description": "The duration of the backdrop fade transition",
            "itemtype": "property",
            "name": "backdropTransitionDuration",
            "type": "number",
            "default": "150",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 269,
            "itemtype": "property",
            "name": "isFastBoot",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 293,
            "description": "The action to be sent when the modal footer's submit button (if present) is pressed.\nNote that if your modal body contains a form (e.g. [Components.Form](Components.Form.html){{/crossLink}}) this action will\nnot be triggered. Instead a submit event will be triggered on the form itself. See the class description for an\nexample.",
            "itemtype": "property",
            "name": "onSubmit",
            "type": "function",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 306,
            "description": "The action to be sent when the modal is closing.\nThis will be triggered by pressing the modal header's close button (x button) or the modal footer's close button.\nNote that this will happen before the modal is hidden from the DOM, as the fade transitions will still need some\ntime to finish. Use the `onHidden` if you need the modal to be hidden when the action triggers.\n\nYou can return false to prevent closing the modal automatically, and do that in your action by\nsetting `open` to false.",
            "itemtype": "property",
            "name": "onHide",
            "type": "function",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 322,
            "description": "The action to be sent after the modal has been completely hidden (including the CSS transition).",
            "itemtype": "property",
            "name": "onHidden",
            "type": "function",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 333,
            "description": "The action to be sent when the modal is opening.\nThis will be triggered immediately after the modal is shown (so it's safe to access the DOM for\nsize calculations and the like). This means that if fade=true, it will be shown in between the\nbackdrop animation and the fade animation.",
            "itemtype": "property",
            "name": "onShow",
            "type": "function",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 347,
            "description": "The action to be sent after the modal has been completely shown (including the CSS transition).",
            "itemtype": "property",
            "name": "onShown",
            "type": "function",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 377,
            "description": "Give the modal (or its autofocus element) focus",
            "itemtype": "method",
            "name": "takeFocus",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 394,
            "description": "Show the modal",
            "itemtype": "method",
            "name": "show",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 444,
            "description": "Hide the modal",
            "itemtype": "method",
            "name": "hide",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 466,
            "description": "Clean up after modal is hidden and call onHidden",
            "itemtype": "method",
            "name": "hideModal",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 486,
            "description": "SHow/hide the backdrop",
            "itemtype": "method",
            "name": "handleBackdrop",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 536,
            "description": "Attach/Detach resize event listeners",
            "itemtype": "method",
            "name": "resize",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 551,
            "itemtype": "method",
            "name": "handleUpdate",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 559,
            "itemtype": "method",
            "name": "adjustDialog",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 571,
            "itemtype": "method",
            "name": "resetAdjustments",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 582,
            "itemtype": "method",
            "name": "checkScrollbar",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 596,
            "itemtype": "method",
            "name": "setScrollbar",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 608,
            "itemtype": "method",
            "name": "resetScrollbar",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-modal.js",
            "line": 616,
            "itemtype": "property",
            "name": "scrollbarWidth",
            "type": "number",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-nav.js",
            "line": 89,
            "description": "Special type of nav, either \"pills\" or \"tabs\"",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Nav",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-nav.js",
            "line": 99,
            "description": "Make the nav justified, see [bootstrap docs](http://getbootstrap.com/components/#nav-justified)",
            "itemtype": "property",
            "name": "justified",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Nav",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-nav.js",
            "line": 109,
            "description": "Make the nav pills stacked, see [bootstrap docs](http://getbootstrap.com/components/#nav-pills)",
            "itemtype": "property",
            "name": "stacked",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Nav",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-nav.js",
            "line": 119,
            "itemtype": "property",
            "name": "itemComponent",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Components.Nav",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-nav.js",
            "line": 126,
            "itemtype": "property",
            "name": "linkToComponent",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Components.Nav",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-nav.js",
            "line": 133,
            "itemtype": "property",
            "name": "dropdownComponent",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Components.Nav",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 106,
            "description": "Manages the state for the responsive menu between the toggle and the content.",
            "itemtype": "property",
            "name": "collapsed",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 116,
            "itemtype": "property",
            "name": "_collapsed",
            "access": "private",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 122,
            "description": "Controls whether the wrapping div is a fluid container or not.",
            "itemtype": "property",
            "name": "fluid",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 132,
            "description": "Specifies the position classes for the navbar, currently supporting none, \"fixed-top\", \"fixed-bottom\", and\neither \"static-top\" (BS3) or \"sticky-top\" (BS4).\nSee the [bootstrap docs](http://getbootstrap.com/components/#navbar-fixed-top) for details.",
            "itemtype": "property",
            "name": "position",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 156,
            "description": "The action to be sent when the navbar is about to be collapsed.\n\nYou can return false to prevent collapsing the navbar automatically, and do that in your action by\nsetting `collapsed` to true.",
            "itemtype": "event",
            "name": "onCollapse",
            "access": "public",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 167,
            "description": "The action to be sent after the navbar has been collapsed (including the CSS transition).",
            "itemtype": "event",
            "name": "onCollapsed",
            "access": "public",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 175,
            "description": "The action to be sent when the navbar is about to be expanded.\n\nYou can return false to prevent expanding the navbar automatically, and do that in your action by\nsetting `collapsed` to false.",
            "itemtype": "event",
            "name": "onExpand",
            "access": "public",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 186,
            "description": "The action to be sent after the navbar has been expanded (including the CSS transition).",
            "itemtype": "event",
            "name": "onExpanded",
            "access": "public",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 207,
            "itemtype": "method",
            "name": "expand",
            "access": "private",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 217,
            "itemtype": "method",
            "name": "collapse",
            "access": "private",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 243,
            "description": "Bootstrap 4 Only: Defines the responsive toggle breakpoint size. Options are the standard\ntwo character Bootstrap size abbreviations. Used to set the `navbar-expand-*`\nclass. Set to `null` to disable collapsing.",
            "itemtype": "property",
            "name": "toggleBreakpoint",
            "type": "String",
            "default": "'lg'",
            "access": "public",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-navbar.js",
            "line": 254,
            "description": "Bootstrap 4 Only: Sets the background color for the navbar. Can be any color\nin the set that composes the `bg-*` classes and can be extended by creating your\nown `bg-*` classes.",
            "itemtype": "property",
            "name": "backgroundColor",
            "type": "String",
            "default": "'light'",
            "access": "public",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-popover.js",
            "line": 68,
            "itemtype": "property",
            "name": "placement",
            "type": "string",
            "default": "'right'",
            "access": "public",
            "tagname": "",
            "class": "Components.Popover",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-popover.js",
            "line": 76,
            "itemtype": "property",
            "name": "triggerEvents",
            "type": "array|string",
            "default": "'click'",
            "access": "public",
            "tagname": "",
            "class": "Components.Popover",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-popover.js",
            "line": 84,
            "description": "The DOm element of the arrow element.",
            "itemtype": "property",
            "name": "arrowElement",
            "type": "object",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Popover",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab.js",
            "line": 114,
            "description": "Type of nav, either \"pills\" or \"tabs\"",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "'tabs'",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab.js",
            "line": 124,
            "description": "By default the tabs will be automatically generated using the available [TabPane](Components.TabPane.html)\ncomponents. If set to true, you can deactivate this and setup the tabs manually. See the example above.",
            "itemtype": "property",
            "name": "customTabs",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab.js",
            "line": 135,
            "description": "The id (`elementId`) of the active [TabPane](Components.TabPane.html).\nBy default the first tab will be active, but this can be changed by setting this property\n\n```hbs\n{{#bs-tab activeId=\"pane2\"}}\n  {{#tab.pane id=\"pane1\" title=\"Tab 1\"}}\n     ...\n  {{/tab.pane}}\n  {{#tab.pane id=\"pane1\" title=\"Tab 1\"}}\n    ...\n  {{/tab.pane}}\n{{/bs-tab}}\n```\n\nWhen the selection is changed by user interaction this property will not update by using two-way bindings in order\nto follow DDAU best practices. If you want to react to such changes, subscribe to the `onChange` action",
            "itemtype": "property",
            "name": "activeId",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab.js",
            "line": 159,
            "itemtype": "property",
            "name": "isActiveId",
            "access": "private",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab.js",
            "line": 165,
            "description": "Set to false to disable the fade animation when switching tabs.",
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab.js",
            "line": 175,
            "description": "The duration of the fade animation",
            "itemtype": "property",
            "name": "fadeDuration",
            "type": "integer",
            "default": "150",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab.js",
            "line": 185,
            "description": "This action is called when switching the active tab, with the new and previous pane id\n\nYou can return false to prevent changing the active tab automatically, and do that in your action by\nsetting `activeId`.",
            "itemtype": "event",
            "name": "onChange",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab.js",
            "line": 196,
            "description": "All `TabPane` child components",
            "itemtype": "property",
            "name": "childPanes",
            "type": "array",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tab.js",
            "line": 208,
            "description": "Array of objects that define the tab structure",
            "itemtype": "property",
            "name": "navItems",
            "type": "array",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/base/bs-tooltip.js",
            "line": 76,
            "description": "The DOM element of the arrow element.",
            "itemtype": "property",
            "name": "arrowElement",
            "type": "object",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Tooltip",
            "namespace": "Components"
        },
        {
            "file": "addon/mixins/component-child.js",
            "line": 14,
            "description": "The parent component",
            "itemtype": "property",
            "name": "_parent",
            "access": "private",
            "tagname": "",
            "class": "Mixins.ComponentChild",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-child.js",
            "line": 24,
            "description": "flag to check if component has already been registered",
            "itemtype": "property",
            "name": "_didRegister",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Mixins.ComponentChild",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-child.js",
            "line": 32,
            "description": "Register ourself as a child at the parent component\nWe use the `willRender` event here to also support the fastboot environment, where there is no `didInsertElement`",
            "itemtype": "method",
            "name": "_registerWithParent",
            "access": "private",
            "tagname": "",
            "class": "Mixins.ComponentChild",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-child.js",
            "line": 49,
            "description": "Unregister from the parent component",
            "itemtype": "method",
            "name": "_unregisterFromParent",
            "access": "private",
            "tagname": "",
            "class": "Mixins.ComponentChild",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-parent.js",
            "line": 14,
            "description": "Array of registered child components",
            "itemtype": "property",
            "name": "children",
            "type": "array",
            "access": "protected",
            "tagname": "",
            "class": "Mixins.ComponentParent",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-parent.js",
            "line": 28,
            "description": "Register a component as a child of this parent",
            "itemtype": "method",
            "name": "registerChild",
            "params": [
                {
                    "name": "child",
                    "description": ""
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Mixins.ComponentParent",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-parent.js",
            "line": 41,
            "description": "Remove the child component from this parent component",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": ""
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Mixins.ComponentParent",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/dropdown-toggle.js",
            "line": 14,
            "itemtype": "property",
            "name": "ariaRole",
            "default": "button",
            "type": "string",
            "access": "protected",
            "tagname": "",
            "class": "Mixins.DropdownToggle",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/dropdown-toggle.js",
            "line": 22,
            "description": "Reference to the parent dropdown component",
            "itemtype": "property",
            "name": "dropdown",
            "type": "{Components.Dropdown}",
            "access": "private",
            "tagname": "",
            "class": "Mixins.DropdownToggle",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/size-class.js",
            "line": 14,
            "description": "Prefix for the size class, e.g. \"btn\" for button size classes (\"btn-lg\", \"btn-sm\" etc.)",
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "string",
            "required": 1,
            "access": "protected",
            "tagname": "",
            "class": "Mixins.SizeClass",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/size-class.js",
            "line": 32,
            "description": "Property for size styling, set to 'lg', 'sm' or 'xs'\n\nAlso see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)",
            "itemtype": "property",
            "name": "size",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Mixins.SizeClass",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/transition-support.js",
            "line": 16,
            "itemtype": "property",
            "name": "transitionsEnabled",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Mixins.TransitionSupport",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/transition-support.js",
            "line": 23,
            "description": "Access to the fastboot service if available",
            "itemtype": "property",
            "name": "fastboot",
            "type": "{Ember.Service}",
            "access": "private",
            "tagname": "",
            "class": "Mixins.TransitionSupport",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/transition-support.js",
            "line": 35,
            "description": "Use CSS transitions?",
            "itemtype": "property",
            "name": "usesTransition",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Mixins.TransitionSupport",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/type-class.js",
            "line": 12,
            "description": "Prefix for the type class, e.g. \"btn\" for button type classes (\"btn-primary2 etc.)",
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "string",
            "required": 1,
            "access": "protected",
            "tagname": "",
            "class": "Mixins.TypeClass",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/type-class.js",
            "line": 30,
            "description": "Property for type styling\n\nFor the available types see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-options) (use without \"btn-\" prefix)",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "'default'",
            "access": "public",
            "tagname": "",
            "class": "Mixins.TypeClass",
            "namespace": "Mixins"
        }
    ],
    "warnings": []
}