{
    "project": {
        "name": "ember-bootstrap",
        "description": "Twitter Bootstrap components for Ember.js",
        "version": "0.9.0.fcdf4193",
        "external": {
            "data": [
                {
                    "base": "http://emberjs.com/api/",
                    "json": "http://builds.emberjs.com/tags/v1.13.10/ember-docs.json"
                }
            ]
        }
    },
    "files": {
        "addon/components/bs-accordion-item.js": {
            "name": "addon/components/bs-accordion-item.js",
            "modules": {},
            "classes": {
                "Components.AccordionItem": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-accordion.js": {
            "name": "addon/components/bs-accordion.js",
            "modules": {},
            "classes": {
                "Components.Accordion": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-alert.js": {
            "name": "addon/components/bs-alert.js",
            "modules": {},
            "classes": {
                "Components.Alert": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-button-group.js": {
            "name": "addon/components/bs-button-group.js",
            "modules": {},
            "classes": {
                "Components.ButtonGroup": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-button.js": {
            "name": "addon/components/bs-button.js",
            "modules": {},
            "classes": {
                "Components.Button": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-collapse.js": {
            "name": "addon/components/bs-collapse.js",
            "modules": {},
            "classes": {
                "Components.Collapse": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-dropdown-button.js": {
            "name": "addon/components/bs-dropdown-button.js",
            "modules": {},
            "classes": {
                "Components.DropdownButton": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-dropdown-menu.js": {
            "name": "addon/components/bs-dropdown-menu.js",
            "modules": {},
            "classes": {
                "Components.DropdownMenu": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-dropdown-toggle.js": {
            "name": "addon/components/bs-dropdown-toggle.js",
            "modules": {},
            "classes": {
                "Components.DropdownToggle": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-dropdown.js": {
            "name": "addon/components/bs-dropdown.js",
            "modules": {},
            "classes": {
                "Components.Dropdown": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-form-element.js": {
            "name": "addon/components/bs-form-element.js",
            "modules": {},
            "classes": {
                "Components.FormElement": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-form-group.js": {
            "name": "addon/components/bs-form-group.js",
            "modules": {},
            "classes": {
                "Components.FormGroup": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-form.js": {
            "name": "addon/components/bs-form.js",
            "modules": {},
            "classes": {
                "Components.Form": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-input.js": {
            "name": "addon/components/bs-input.js",
            "modules": {},
            "classes": {
                "Components.Input": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-modal-body.js": {
            "name": "addon/components/bs-modal-body.js",
            "modules": {},
            "classes": {
                "Components.ModalBody": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-modal-dialog.js": {
            "name": "addon/components/bs-modal-dialog.js",
            "modules": {},
            "classes": {
                "Components.ModalDialog": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-modal-footer.js": {
            "name": "addon/components/bs-modal-footer.js",
            "modules": {},
            "classes": {
                "Components.ModalFooter": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-modal-header.js": {
            "name": "addon/components/bs-modal-header.js",
            "modules": {},
            "classes": {
                "Components.ModalHeader": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-modal.js": {
            "name": "addon/components/bs-modal.js",
            "modules": {},
            "classes": {
                "Components.Modal": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-nav-item.js": {
            "name": "addon/components/bs-nav-item.js",
            "modules": {},
            "classes": {
                "Components.NavItem": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-nav.js": {
            "name": "addon/components/bs-nav.js",
            "modules": {},
            "classes": {
                "Components.Nav": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-navbar-content.js": {
            "name": "addon/components/bs-navbar-content.js",
            "modules": {},
            "classes": {
                "Components.NavbarContent": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-navbar-nav.js": {
            "name": "addon/components/bs-navbar-nav.js",
            "modules": {},
            "classes": {
                "Components.NavbarNav": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-navbar-toggle.js": {
            "name": "addon/components/bs-navbar-toggle.js",
            "modules": {},
            "classes": {
                "Components.NavbarToggle": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-navbar.js": {
            "name": "addon/components/bs-navbar.js",
            "modules": {},
            "classes": {
                "Components.Navbar": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-progress-bar.js": {
            "name": "addon/components/bs-progress-bar.js",
            "modules": {},
            "classes": {
                "Components.ProgressBar": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-progress.js": {
            "name": "addon/components/bs-progress.js",
            "modules": {},
            "classes": {
                "Components.Progress": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-select.js": {
            "name": "addon/components/bs-select.js",
            "modules": {},
            "classes": {
                "Components.Select": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-tab-pane.js": {
            "name": "addon/components/bs-tab-pane.js",
            "modules": {},
            "classes": {
                "Components.TabPane": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-tab.js": {
            "name": "addon/components/bs-tab.js",
            "modules": {},
            "classes": {
                "Components.Tab": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/components/bs-textarea.js": {
            "name": "addon/components/bs-textarea.js",
            "modules": {},
            "classes": {
                "Components.Textarea": 1
            },
            "fors": {},
            "namespaces": {
                "Components": 1
            }
        },
        "addon/mixins/component-child.js": {
            "name": "addon/mixins/component-child.js",
            "modules": {},
            "classes": {
                "Mixins.ComponentChild": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/component-parent.js": {
            "name": "addon/mixins/component-parent.js",
            "modules": {},
            "classes": {
                "Mixins.ComponentParent": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/dropdown-toggle.js": {
            "name": "addon/mixins/dropdown-toggle.js",
            "modules": {},
            "classes": {
                "Mixins.DropdownToggle": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/modal-closer.js": {
            "name": "addon/mixins/modal-closer.js",
            "modules": {},
            "classes": {
                "Mixins.ModalCloser": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/size-class.js": {
            "name": "addon/mixins/size-class.js",
            "modules": {},
            "classes": {
                "Mixins.SizeClass": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/sub-component.js": {
            "name": "addon/mixins/sub-component.js",
            "modules": {},
            "classes": {
                "Mixins.SubComponent": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/mixins/type-class.js": {
            "name": "addon/mixins/type-class.js",
            "modules": {},
            "classes": {
                "Mixins.TypeClass": 1
            },
            "fors": {},
            "namespaces": {
                "Mixins": 1
            }
        },
        "addon/utils/array-includes.js": {
            "name": "addon/utils/array-includes.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Components.AccordionItem": {
            "name": "Components.AccordionItem",
            "shortname": "Components.AccordionItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-accordion-item.js",
            "line": 7,
            "description": "A collapsible/expandable item within an accordion\n\nSee [Components.Accordion](Components.Accordion.html) for examples.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TypeClass",
                "Mixins.SubComponent"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Accordion": {
            "name": "Components.Accordion",
            "shortname": "Components.Accordion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-accordion.js",
            "line": 3,
            "description": "Bootstrap-style accordion group, with collapsible/expandable items.\nSee http://getbootstrap.com/components/#btn-groups\n\nUse as a block level component with any number of [Components.AccordionItem](Components.AccordionItem.html) components as children:\n\n```handlebars\n {{#bs-accordion selected=selected}}\n     {{#bs-accordion-item value=\"1\" title=\"First item\"}}\n       <p>Lorem ipsum...</p>\n     {{/bs-accordion-item}}\n     {{#bs-accordion-item value=\"2\" title=\"Second item\"}}\n       <p>Lorem ipsum...</p>\n     {{/bs-accordion-item}}\n     {{#bs-accordion-item value=\"3\" title=\"Third item\"}}\n       <p>Lorem ipsum...</p>\n     {{/bs-accordion-item}}\n {{/bs-accordion}}\n\n <p>Selected accordion item: {{selected}}</p>\n```",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.Alert": {
            "name": "Components.Alert",
            "shortname": "Components.Alert",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-alert.js",
            "line": 6,
            "description": "Implements Bootstrap alerts, see http://getbootstrap.com/components/#alerts\n\nBy default it is a user dismissible alert with a fade out animation, both of which can be disabled. Be sure to set the\n`type` property for proper styling.\n\n```hbs\n{{#bs-alert type=\"success\"}}\n<strong>Well done!</strong> You successfully read this important alert message.\n{{/bs-alert}}\n```",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TypeClass"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.ButtonGroup": {
            "name": "Components.ButtonGroup",
            "shortname": "Components.ButtonGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-button-group.js",
            "line": 8,
            "description": "Bootstrap-style button group, that visually groups buttons, and optionally adds radio/checkbox like behaviour.\nSee http://getbootstrap.com/components/#btn-groups\n\nUse as a block level component with any number of [Components.Button](Components.Button.html) components as children:\n\n```handlebars\n{{#bs-button-group}}\n  {{#bs-button}}1{{/bs-button}}\n  {{#bs-button}}2{{/bs-button}}\n  {{#bs-button}}3{{/bs-button}}\n{{/bs-button-group}}\n```\n\n### Radio-like behaviour\n\nUse the `type` property set to \"radio\" to make the child buttons toggle like radio buttons, i.e. only one button can be active.\nSet the `value` property of the buttons to something meaningful. The `value` property of the button group will then reflect\nthe value of the active button:\n\n```handlebars\n{{#bs-button-group value=buttonGroupValue type=\"radio\"}}\n  {{#bs-button value='foo'}}foo{{/bs-button}}\n  {{#bs-button value='bar'}}bar{{/bs-button}}\n  {{#bs-button value='baz'}}baz{{/bs-button}}\n{{/bs-button-group}}\n\nYou selected: {{buttonGroupValue}}!\n```\n\n### Checkbox-like behaviour\n\nSet `type` to \"checkbox\" to make any number of child buttons selectable. The `value` property will be an array\nof all the values of the active buttons:\n\n```handlebars\n{{#bs-button-group value=buttonGroupValue type=\"checkbox\"}}\n  {{#bs-button value='foo'}}foo{{/bs-button}}\n  {{#bs-button value='bar'}}bar{{/bs-button}}\n  {{#bs-button value='baz'}}baz{{/bs-button}}\n{{/bs-button-group}}\n\nYou selected:\n<ul>\n{{#each value in buttonGroupValue}}\n  <li>{{value}}</li>\n{{/each}}\n</ul>\n```",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.SizeClass"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Button": {
            "name": "Components.Button",
            "shortname": "Components.Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-button.js",
            "line": 8,
            "description": "Implements a HTML button element, with support for all [Bootstrap button CSS styles](http://getbootstrap.com/css/#buttons)\nas well as advanced functionality such as button states.\n\n### Basic Usage\n\n```hbs\n{{#bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\"}}\nDownloads\n{{/bs-button}}\n```\n\n### Actions\n\nSet the action property of the component to send an action to your controller. The following parameters will be sent:\n* value: the button's value, see the `value` property\n* event: the browsers event object\n* callback: a function that may be called from the action handler to supply a Promise to the button component for automatic state handling\n\n```hbs\n{{#bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\" action=\"download\"}}\nDownload\n{{/bs-button}}\n```\n\n### States\n\nUse the `textState` property to change the label of the button. You can bind it to a controller property to set a \"loading\" state for example.\nThe label of the button will be taken from the `<state>Text` property.\n\n```hbs\n{{bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\" textState=buttonState defaultText=\"Download\" loadingText=\"Loading...\" action=\"download\"}}\n```\n\n```js\nApp.ApplicationController = Ember.Controller.extend({\n  buttonState: \"default\"\n  actions: {\n    download: function() {\n      this.set(\"buttonState\", \"loading\");\n    }\n  }\n});\n```\n\n### Promise support for automatic state change\n\nWhen returning a Promise for any asynchronous operation from the click closure action the button will\nmanage its `textState` property automatically, changing its value according to the state of the promise:\n\"default\" > \"pending\" > \"resolved\"/\"rejected\"\n\n```hbs\n{{bs-button type=\"primary\" icon=\"glyphicon glyphicon-download\" defaultText=\"Download\" pendingText=\"Loading...\" resolvedText=\"Completed!\" rejectedText=\"Oups!?\" action=(action \"download\")}}\n```\n\n```js\n// controller.js\nexport default Ember.Controller.extend({\n  actions: {\n    download(actionParam, evt) {\n      return new Ember.RSVP.Promise(...);\n    }\n  }\n});\n```",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TypeClass",
                "Mixins.SizeClass"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Collapse": {
            "name": "Components.Collapse",
            "shortname": "Components.Collapse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-collapse.js",
            "line": 5,
            "description": "An Ember component that mimics the behaviour of Bootstrap's collapse.js plugin, see http://getbootstrap.com/javascript/#collapse\n\n```hbs\n{{#bs-collapse collapsed=collapsed}}\n <div class=\"well\">\n   <h2>Collapse</h2>\n   <p>This is collapsible content</p>\n </div>\n{{/bs-collapse}}\n```",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.DropdownButton": {
            "name": "Components.DropdownButton",
            "shortname": "Components.DropdownButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-dropdown-button.js",
            "line": 4,
            "description": "Button component with that can act as a dropdown toggler.\n\nSee [Components.Dropdown](Components.Dropdown.html) for examples.",
            "extends": "Components.Button",
            "uses": [
                "Mixins.DropdownToggle"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.DropdownMenu": {
            "name": "Components.DropdownMenu",
            "shortname": "Components.DropdownMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-dropdown-menu.js",
            "line": 5,
            "description": "Component for the dropdown menu.\n\nSee [Components.Dropdown](Components.Dropdown.html) for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.DropdownToggle": {
            "name": "Components.DropdownToggle",
            "shortname": "Components.DropdownToggle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-dropdown-toggle.js",
            "line": 6,
            "description": "Anchor element that triggers the parent dropdown to open.\nUse [Components.DropdownButton](Components.DropdownButton.html) if you want a button instead of an anchor tag.\n\nSee [Components.Dropdown](Components.Dropdown.html) for examples.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.DropdownToggle"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Dropdown": {
            "name": "Components.Dropdown",
            "shortname": "Components.Dropdown",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-dropdown.js",
            "line": 7,
            "description": "Bootstrap style dropdown menus, consisting of a toggle element, and the dropdown menu itself.\nSee http://getbootstrap.com/components/#dropdowns\n\nUse this component together with two sub components, a dropdown toggle (`Components.DropdownToggle` or\n`Components.DropdownButton` component) and a dropdown menu (`Components.DropdownMenu`) component:\n\n```hbs\n<nav class=\"navbar navbar-default navbar-static\">\n  <div class=\"container-fluid\">\n    <ul class=\"nav navbar-nav\">\n      {{#bs-dropdown tagName=\"li\"}}\n        {{#bs-dropdown-toggle}}Dropdown <span class=\"caret\"></span>{{/bs-dropdown-toggle}}\n        {{#bs-dropdown-menu}}\n          <li>{{#link-to \"index\"}}Something{{/link-to}}</li>\n          <li>{{#link-to \"index\"}}Something different{{/link-to}}</li>\n        {{/bs-dropdown-menu}}\n      {{/bs-dropdown}}\n    </ul>\n  </div>\n</nav>\n```\n\n### Button dropdowns\n\nTo use a button as the dropdown toggle element (see http://getbootstrap.com/components/#btn-dropdowns), use the\n`Components.DropdownButton` component as the toggle:\n\n```hbs\n{{#bs-dropdown}}\n  {{#bs-dropdown-button}}Dropdown <span class=\"caret\"></span>{{/bs-dropdown-button}}\n  {{#bs-dropdown-menu}}\n    <li>{{#link-to \"index\"}}Something{{/link-to}}</li>\n    <li>{{#link-to \"index\"}}Something different{{/link-to}}</li>\n  {{/bs-dropdown-menu}}\n{{/bs-dropdown}}\n```\n\nIt has all the functionality of a `Components.Button` with additional dropdown support.\n\n### Split button dropdowns\n\nTo have a regular button with a dropdown button as in http://getbootstrap.com/components/#btn-dropdowns-split, use a\n`Components.Button` component and a `Components.DropdownButton`:\n\n```hbs\n{{#bs-dropdown}}\n  {{#bs-button}}Dropdown{{/bs-button}}\n  {{#bs-dropdown-button}}Dropdown <span class=\"caret\"></span>{{/bs-dropdown-button}}\n  {{#bs-dropdown-menu}}\n    <li>{{#link-to \"index\"}}Something{{/link-to}}</li>\n    <li>{{#link-to \"index\"}}Something different{{/link-to}}</li>\n  {{/bs-dropdown-menu}}\n{{/bs-dropdown}}\n```\n\n### Dropup style\n\nSet the `direction` property to \"up\" to switch to a \"dropup\" style:\n\n```hbs\n{{#bs-dropdown direction=\"up\"}}\n  ...\n{{/bs-dropdown}}\n```",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.FormElement": {
            "name": "Components.FormElement",
            "shortname": "Components.FormElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-form-element.js",
            "line": 15,
            "description": "Sub class of `Components.FormGroup` that adds automatic form layout markup and form validation features.\n\n### Form layout\n\nThe appropriate Bootstrap markup for the given `formLayout` and `controlType` is automatically generated to easily\ncreate forms without coding the default Bootstrap form markup by hand:\n\n```hbs\n{{#bs-form formLayout=\"horizontal\" action=\"submit\"}}\n  {{bs-form-element controlType=\"email\" label=\"Email\" placeholder=\"Email\" value=email}}\n  {{bs-form-element controlType=\"password\" label=\"Password\" placeholder=\"Password\" value=password}}\n  {{bs-form-element controlType=\"checkbox\" label=\"Remember me\" value=rememberMe}}\n  {{bs-button defaultText=\"Submit\" type=\"primary\" buttonType=\"submit\"}}\n{{/bs-form}}\n```\n\n### Form validation\n\nIn the following example the control elements of the three form elements value will be bound to the properties\n(given by `property`) of the form's `model`, which in this case is its controller (see `model=this`):\n\n```hbs\n{{#bs-form formLayout=\"horizontal\" model=this action=\"submit\"}}\n  {{bs-form-element controlType=\"email\" label=\"Email\" placeholder=\"Email\" property=\"email\"}}\n  {{bs-form-element controlType=\"password\" label=\"Password\" placeholder=\"Password\" property=\"password\"}}\n  {{bs-form-element controlType=\"checkbox\" label=\"Remember me\" property=\"rememberMe\"}}\n  {{bs-button defaultText=\"Submit\" type=\"primary\" buttonType=\"submit\"}}\n{{/bs-form}}\n```\n\nBy using this indirection in comparison to directly binding the `value` property, you get the benefit of automatic\nform validation, given that your `model` has a supported means of validating itself.\nSee [Components.Form](Components.Form.html) for details on how to enable form validation.\n\nIn the example above the `model` was our controller itself, so the control elements were bound to the appropriate\nproperties of our controller. A controller implementing validations on those properties could look like this:\n\n```js\nimport Ember from 'ember';\nimport EmberValidations from 'ember-validations';\n\nexport default Ember.Controller.extend(EmberValidations,{\n  email: null,\n  password: null,\n  rememberMe: false,\n  validations: {\n    email: {\n      presence: true,\n      format: {\n        with: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/\n      }\n    },\n    password: {\n      presence: true,\n      length: { minimum: 6, maximum: 10}\n    },\n    comments: {\n      length: { minimum: 5, maximum: 20}\n    }\n  }\n});\n```\n\nIf the `showValidation` property is `true` (which is automatically the case if a `focusOut` event is captured from the\ncontrol element or the containing `Components.Form` was submitted with its `model` failing validation) and there are\nvalidation errors for the `model`'s `property`, the appropriate Bootstrap validation markup (see\nhttp://getbootstrap.com/css/#forms-control-validation) is applied:\n\n* `validation` is set to 'error', which will set the `has-error` CSS class\n* the `errorIcon` feedback icon is displayed if `controlType` is a text field\n* the validation messages are displayed as Bootstrap `help-block`s\n\nThe same applies for warning messages, if the used validation library supports this. (Currently only\n[ember-cp-validations](https://github.com/offirgolan/ember-cp-validations))\n\nAs soon as the validation is successful again...\n\n* `validation` is set to 'success', which will set the `has-success` CSS class\n* the `successIcon` feedback icon is displayed if `controlType` is a text field\n* the validation messages are removed\n\n### Custom controls\n\nApart from the standard built-in browser controls (see the `controlType` property), you can use any custom control simply\nby invoking the component with a block template. Use whatever control you might want, for example a select-2 component\n(from the [ember-select-2 addon](https://istefo.github.io/ember-select-2)):\n\n```hbs\n{{#bs-form formLayout=\"horizontal\" model=this action=\"submit\"}}\n  {{#bs-form-element label=\"Select-2\" property=\"gender\" useIcons=false as |value id validationState|}}\n    {{select-2 id=id content=genderChoices optionLabelPath=\"label\" value=value searchEnabled=false}}\n  {{/bs-form-element}}\n{{/bs-form}}\n```\n\nIf your custom control does not render an input element, you should set `useIcons` to `false` since bootstrap only supports\nfeedback icons with textual `<input class=\"form-control\">` elements.",
            "extends": "Components.FormGroup",
            "access": "public",
            "tagname": ""
        },
        "Components.FormGroup": {
            "name": "Components.FormGroup",
            "shortname": "Components.FormGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-form-group.js",
            "line": 6,
            "description": "This component renders a `<div class=\"form-group\">` element, with support for validation states and feedback icons.\nUse as a block level component:\n\n```hbs\n{{#bs-form-group validation=firstNameValidation}}\n  <label class=\"control-label\">First name</label>\n  {{bs-input type=\"text\" value=firstname}}\n{{/bs-form-group}}\n```\n\nIf the `validation` property is set to some state (usually Bootstrap's predefined states \"success\",\n\"warning\" or \"error\"), the appropriate styles will be added, together with a feedback icon.\nSee http://getbootstrap.com/css/#forms-control-validation",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.Form": {
            "name": "Components.Form",
            "shortname": "Components.Form",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-form.js",
            "line": 7,
            "description": "Render a form with the appropriate Bootstrap layout class (see `formLayout`).\nAllows setting a `model` that nested `Components.FormElement`s can access, and that can provide form validation (see below)\n\nYou can use whatever markup you like within the form:\n\n ```handlebars\n {{#bs-form action=\"submit\"}}\n   {{#bs-form-group validation=firstNameValidation}}\n     <label class=\"control-label\">First name</label>\n     {{bs-input type=\"text\" value=firstname}}\n  {{/bs-form-group}}\n{{/bs-form}}\n```\n\nHowever to benefit from features such as automatic form markup, validations and validation markup, use `Components.FormElement`\nas nested components. See below for an example.\n\n### Submitting the form\n\nWhen the form is submitted (e.g. by clicking a submit button), the event will be intercepted and the default action\nwill be sent to the controller.\nIn case the form supports validation (see \"Form validation\" below), the \"before\" action is called (which allows you to\ndo e.g. model data normalization), then the available  validation rules are evaluated, and if those fail, the \"invalid\"\naction is sent instead of the default \"action\".\n\n### Use with Components.FormElement\n\nWhen using `Components.FormElement`s with their `property` set to property names of the form's validation enabled\n`model`, you gain some additional powerful features:\n* the appropriate Bootstrap markup for the given `formLayout` and the form element's `controlType` is automatically generated\n* markup for validation states and error messages is generated based on the model's validation (if available), when submitting the form\nwith an invalid validation, or when focusing out of invalid inputs\n\n```handlebars\n{{#bs-form formLayout=\"horizontal\" model=this action=\"submit\"}}\n  {{bs-form-element controlType=\"email\" label=\"Email\" placeholder=\"Email\" property=\"email\"}}\n  {{bs-form-element controlType=\"password\" label=\"Password\" placeholder=\"Password\" property=\"password\"}}\n  {{bs-form-element controlType=\"checkbox\" label=\"Remember me\" property=\"rememberMe\"}}\n  {{bs-button defaultText=\"Submit\" type=\"primary\" buttonType=\"submit\"}}\n{{/bs-form}}\n```\n\nSee the [Components.FormElement](Components.FormElement.html) API docs for further information.\n\n### Form validation\n\nAll version of ember-bootstrap beginning from 0.7.0 do not come with built-in support for validation engines anymore.\nInstead support is added usually by additional Ember addons, for example:\n\n* [ember-bootstrap-validations](https://github.com/kaliber5/ember-bootstrap-validations): adds support for [ember-validations](https://github.com/DockYard/ember-validations)\n* [ember-bootstrap-cp-validations](https://github.com/offirgolan/ember-bootstrap-cp-validations): adds support for [ember-cp-validations](https://github.com/offirgolan/ember-cp-validations)\n* [ember-bootstrap-changeset-validations](https://github.com/kaliber5/ember-bootstrap-changeset-validations): adds support for [ember-changeset](https://github.com/poteto/ember-changeset)\n\nTo add your own validation support, you have to:\n\n* extend this component, setting `hasValidator` to true if validations are available (by means of a computed property for example), and implementing the `validate` method\n* extend the [Components.FormElement](Components.FormElement.html) component and implement the `setupValidations` hook or simply override the `errors` property to add the validation error messages to be displayed\n\nWhen validation fails, the appropriate Bootstrap markup is added automatically, i.e. the error classes are applied and\nthe validation messages are shown for each form element. In case the validation library supports it, also warning messages\nare shown. See the [Components.FormElement](Components.FormElement.html) documentation for further details.\n\nSee the above mentioned addons for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.Input": {
            "name": "Components.Input",
            "shortname": "Components.Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-input.js",
            "line": 3,
            "description": "Extends Ember.TextField to add Bootstrap's 'form-control' class.",
            "extends": "Ember.TextField",
            "access": "public",
            "tagname": ""
        },
        "Components.ModalBody": {
            "name": "Components.ModalBody",
            "shortname": "Components.ModalBody",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-modal-body.js",
            "line": 3,
            "description": "Modal body element used within [Components.Modal](Components.Modal.html) components. See there for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.ModalDialog": {
            "name": "Components.ModalDialog",
            "shortname": "Components.ModalDialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-modal-dialog.js",
            "line": 5,
            "description": "Internal component for modal's markup and event handling. Should not be used directly.",
            "extends": "Ember.Component",
            "access": "private",
            "tagname": ""
        },
        "Components.ModalFooter": {
            "name": "Components.ModalFooter",
            "shortname": "Components.ModalFooter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-modal-footer.js",
            "line": 6,
            "description": "Modal footer element used within [Components.Modal](Components.Modal.html) components. See there for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.ModalHeader": {
            "name": "Components.ModalHeader",
            "shortname": "Components.ModalHeader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-modal-header.js",
            "line": 4,
            "description": "Modal header element used within [Components.Modal](Components.Modal.html) components. See there for examples.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.Modal": {
            "name": "Components.Modal",
            "shortname": "Components.Modal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-modal.js",
            "line": 18,
            "description": "Component for creating [Bootstrap modals](http://getbootstrap.com/javascript/#modals). Creating a simple modal is easy:\n```hbs\n {{#bs-modal title=\"Simple Dialog\"}}\n   Hello world!\n {{/bs-modal}}\n ```\nThis will automatically create the appropriate markup, with a modal header containing the title, and a footer containing\n a default \"Ok\" button, that will close the modal automatically (unless you set `autoClose` to false).\nA modal created this way will be visible at once. You can use the `{{#if ...}}` helper to hide all modal elements form\n the DOM until needed. Or you can bind the `open` property to trigger showing and hiding the modal:\n```hbs\n {{#bs-modal open=openModal title=\"Simple Dialog\"}}\n   Hello world!\n {{/bs-modal}}\n ```\n### Custom Markup\nTo customize your modal markup you can use the following sub components:\n[Components.ModalBody](Components.ModalBody.html)\n [Components.ModalHeader](Components.ModalHeader.html)\n [Components.ModalFooter](Components.ModalFooter.html)\nIn the example above, these are generated for you automatically. Whenever you use one of these by yourself you should\n set the appropriate property (`body`, `footer`, `header`) to false to prevent their automatic generation. Note that\n in any case where you use a custom sub component, you must also use a custom [Components.ModalBody](Components.ModalBody.html)!\nA common use case is to customize the buttons in the footer. Most often you will have a cancel button that closes the\n model without action, and a submit button that triggers some action. The footer component supports this case by letting\n you customize the button titles, the rest (triggering close or submit actions) automatically set up:\n```hbs\n {{#bs-modal body=false footer=false title=\"Attention\" submitAction=(action \"submit\")}}\n   {{#bs-modal-body}}Are you sure?{{/bs-modal-body}}\n   {{bs-modal-footer closeTitle=\"Cancel\" submitTitle=\"Ok\"}}\n {{/bs-modal}}\n ```\nIf you further want to customize your modal elements, you can supply custom templates for your footer and header, as in\n the following example:\n```hbs\n {{#bs-modal body=false footer=false header=false submitAction=(action \"submit\")}}\n   {{#bs-modal-header}}\n     <h4 class=\"modal-title\"><i class=\"glyphicon glyphicon-alert\"></i> Alert</h4>\n   {{/bs-modal-header}}\n   {{#bs-modal-body}}Are you absolutely sure you want to do that???{{/bs-modal-body}}\n   {{#bs-modal-footer as |footer|}}\n     {{#bs-button action=(action \"close\" target=footer) type=\"danger\"}}Oh no, forget it!{{/bs-button}}\n     {{#bs-button buttonType=\"submit\" type=\"success\"}}Yeah!{{/bs-button}}\n   {{/bs-modal-footer}}\n {{/bs-modal}}\n ```\nNote the use of the action helper of the close button that triggers the close action on the modal footer component\n instead of on the controller, which will bubble up to the modal component and close the modal.\n### Modals with forms\nThere is a special case when you have a form inside your modals body: you probably do not want to have a submit button\n within your form but instead in your modal footer. Hover pressing the submit button outside of your form would not\n trigger the form data to be submitted. In the example below this would not trigger the submit action of the form, an\n thus bypass the form validation feature of the form component.\n```hbs\n {{#bs-modal title=\"Form Example\" body=false footer=false}}\n   {{#bs-modal-body}}\n     {{#bs-form action=(action \"submit\") model=this}}\n       {{bs-form-element controlType=\"text\" label=\"first name\" property=\"firstname\"}}\n       {{bs-form-element controlType=\"text\" label=\"last name\" property=\"lastname\"}}\n     {{/bs-form}}\n   {{/bs-modal-body}}\n   {{bs-modal-footer closeTitle=(t \"contact.label.cancel\") submitTitle=(t \"contact.label.ok\")}}\n {{/bs-modal}}\n ```\nThe modal component supports this common case by triggering the submit event programmatically on the body's form if\n present whenever the footer's submit button is pressed, so the example above will work as expected.\n### Auto-focus\nIn order to allow key handling to function, the modal's root element is given focus once the modal is shown. If your\n modal contains an element such as a text input and you would like it to be given focus rather than the modal element,\n then give it the HTML5 autofocus attribute:\n```hbs\n {{#bs-modal title=\"Form Example\" body=false footer=false}}\n   {{#bs-modal-body}}\n     {{#bs-form action=(action \"submit\") model=this}}\n       {{bs-form-element controlType=\"text\" label=\"first name\" property=\"firstname\" autofocus=true}}\n       {{bs-form-element controlType=\"text\" label=\"last name\" property=\"lastname\"}}\n     {{/bs-form}}\n   {{/bs-modal-body}}\n   {{bs-modal-footer closeTitle=(t \"contact.label.cancel\") submitTitle=(t \"contact.label.ok\")}}\n {{/bs-modal}}\n ```\n\n### Modals inside wormhole\nModals make use of the [ember-wormhole](https://github.com/yapplabs/ember-wormhole) addon, which will be installed\n automatically alongside ember-bootstrap. This is used to allow the modal to be placed in deeply nested\n components/templates where it belongs to logically, but to have the actual DOM elements within a special container\n element, which is a child of ember's root element. This will make sure that modals always overlay the whole app, and\n are not effected by parent elements with `overflow: hidden` for example.\nIf you want the modal to render in place, rather than being wormholed, you can set renderInPlace=true.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.NavItem": {
            "name": "Components.NavItem",
            "shortname": "Components.NavItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-nav-item.js",
            "line": 16,
            "description": "Component for each item within a [Components.Nav](Components.Nav.html) component. Have a look there for examples.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.ComponentParent"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Nav": {
            "name": "Components.Nav",
            "shortname": "Components.Nav",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-nav.js",
            "line": 6,
            "description": "Component to generate [bootstrap navs](http://getbootstrap.com/components/#nav)\n### Usage\nUse in combination with the [Components.NavItem](Components.NavItem.html) component:\n```hbs\n {{#bs-nav type=\"pills\"}}\n   {{#bs-nav-item}}\n      {{#link-to \"foo\"}}Foo{{/link-to}}\n   {{/bs-nav-item}}\n   {{#bs-nav-item}}\n     {{#link-to \"bar\"}}Bar{{/link-to}}\n   {{/bs-nav-item}}\n {{/bs-nav}}\n ```\n### Nav styles\nThe component supports the default bootstrap nav styling options \"pills\" and \"tabs\" through the `type`\n property, as well as the `justified` and `stacked` properties.\n### Active items\nBootstrap expects to have the `active` class on the `<li>` element that should be the active (highlighted)\n navigation item. To achieve that just use the `link-to` helper as usual. If the link is active, i.e\n it points to the current route, the `bs-nav-item` component will detect that and apply the `active` class\n automatically. The same applies for the `disabled` state.\n### Dropdowns\nUse the [Components.Dropdown](Components.Dropdown.html) component with a `tagName` of \"li\" to integrate a dropdown into your nav:\n```hbs\n {{#bs-nav type=\"pills\"}}\n   {{#bs-nav-item}}{{#link-to \"index\"}}Home{{/link-to}}{{/bs-nav-item}}\n   {{#bs-dropdown tagName=\"li\"}}\n     {{#bs-dropdown-toggle}}Dropdown <span class=\"caret\"></span>{{/bs-dropdown-toggle}}\n     {{#bs-dropdown-menu}}\n       <li>{{#link-to \"foo\"}}Foo{{/link-to}}</li>\n       <li>{{#link-to \"bar\"}}Bar{{/link-to}}</li>\n     {{/bs-dropdown-menu}}\n   {{/bs-dropdown}}\n {{/bs-nav}}\n ```",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.NavbarContent": {
            "name": "Components.NavbarContent",
            "shortname": "Components.NavbarContent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-navbar-content.js",
            "line": 6,
            "description": "Component to wrap the collapsible content of a [Components.Navbar](Components.Navbar.html) component.\nHave a look there for examples.",
            "extends": "Components.Collapse",
            "access": "public",
            "tagname": ""
        },
        "Components.NavbarNav": {
            "name": "Components.NavbarNav",
            "shortname": "Components.NavbarNav",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-navbar-nav.js",
            "line": 4,
            "description": "Component for the `.nav` element within a [Components.Navbar](Components.Navbar.html)\ncomponent. Have a look there for examples.\n\nPer [the bootstrap docs](http://getbootstrap.com/components/#navbar),\njustified navbar nav links are not supported.",
            "extends": "Components.Nav",
            "access": "public",
            "tagname": ""
        },
        "Components.NavbarToggle": {
            "name": "Components.NavbarToggle",
            "shortname": "Components.NavbarToggle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-navbar-toggle.js",
            "line": 6,
            "description": "Component to implement the responsive menu toggle behavior in a [Components.Navbar](Components.Navbar.html)\ncomponent. Have a look there for examples.\n\nThe button `toggle` property will always be set to `true` in this component.",
            "extends": "Components.Button",
            "access": "public",
            "tagname": ""
        },
        "Components.Navbar": {
            "name": "Components.Navbar",
            "shortname": "Components.Navbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-navbar.js",
            "line": 5,
            "description": "Component to generate [bootstrap navbars](http://getbootstrap.com/components/#navbar).\n\n### Usage\n\nUsed in combination with the following components:\n\n- [Components.NavbarContent](Components.NavbarContent.html\n- [Components.NavbarToggle](Components.NavbarToggle.html\n- [Components.NavbarNav](Components.NavbarNav.html\n- [Components.NavItem](Components.NavItem.html)\n\n```hbs\n{{#bs-navbar}}\n  <div class=\"navbar-header\">\n    {{#bs-navbar-toggle}}\n      <span class=\"sr-only\">Toggle navigation</span>\n      <span class=\"icon-bar\"></span>\n      <span class=\"icon-bar\"></span>\n      <span class=\"icon-bar\"></span>\n    {{/bs-navbar-toggle}}\n    <a class=\"navbar-brand\" href=\"#\">Brand</a>\n  </div>\n  {{#bs-navbar-content}}\n    {{#bs-navbar-nav}}\n      {{#bs-nav-item}}{{#link-to \"alert\"}}Alert{{/link-to}}{{/bs-nav-item}}\n      {{#bs-nav-item}}{{#link-to \"button\"}}Buttons{{/link-to}}{{/bs-nav-item}}\n      {{#bs-nav-item}}{{#link-to \"dropdown\"}}Dropdown{{/link-to}}{{/bs-nav-item}}\n      {{#bs-nav-item}}{{#link-to \"forms\"}}Forms{{/link-to}}{{/bs-nav-item}}\n      {{#bs-nav-item}}{{#link-to \"accordion\"}}Accordion{{/link-to}}{{/bs-nav-item}}\n      {{#bs-nav-item}}{{#link-to \"collapse\"}}Collapse{{/link-to}}{{/bs-nav-item}}\n      {{#bs-nav-item}}{{#link-to \"modal\"}}Modals{{/link-to}}{{/bs-nav-item}}\n      {{#bs-nav-item}}{{#link-to \"progress\"}}Progress bars{{/link-to}}{{/bs-nav-item}}\n      {{#bs-nav-item}}{{#link-to \"navs\"}}Navs{{/link-to}}{{/bs-nav-item}}\n      {{#bs-nav-item}}{{#link-to \"navbars\"}}Navbars{{/link-to}}{{/bs-nav-item}}\n    {{/bs-navbar-nav}}\n  {{/bs-navbar-content}}\n{{/bs-navbar}}\n```\n\n### Navbar styles\n\nThe component supports the default bootstrap navbar styling options \"default\" and \"inverse\" through the `type`\nproperty. Bootstrap navbars [do not currently support justified nav links](http://getbootstrap.com/components/#navbar-default),\nso those are explicitly disallowed.\n\nOther bootstrap navbar variations, such as forms, buttons, etc. can be supported through direct use of\nbootstrap styles applied through the `class` attribute on the components.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TypeClass"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.ProgressBar": {
            "name": "Components.ProgressBar",
            "shortname": "Components.ProgressBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-progress-bar.js",
            "line": 6,
            "description": "Component to display a Bootstrap progress bar, see http://getbootstrap.com/components/#progress.\n### Usage\nAlways wrap the progress bar in a [Components.Progress](Components.Progress.html) component. Use the `value`\n property to control the progress bar's width. To apply the different styling options supplied by Bootstrap, use the\n appropriate properties like `type`, `showLabel`, `striped` or `animate`.\n```hbs\n {{#bs-progress}}\n   {{bs-progress-bar value=progressValue minValue=0 maxValue=10 showLabel=true type=\"danger\"}}\n {{/bs-progress}}\n ```\n### Stacked\nYou can place multiple progress bar components in a single [Components.Progress](Components.Progress.html) to\n create a stack of progress bars as seen in http://getbootstrap.com/components/#progress-stacked.\n```hbs\n {{#bs-progress}}\n   {{bs-progress-bar value=progressValue1 type=\"success\"}}\n   {{bs-progress-bar value=progressValue2 type=\"warning\"}}\n   {{bs-progress-bar value=progressValue3 type=\"danger\"}}\n {{/bs-progress}}\n ```",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.TypeClass"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Progress": {
            "name": "Components.Progress",
            "shortname": "Components.Progress",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-progress.js",
            "line": 3,
            "description": "Use to group one (or more) [Components.ProgressBar](Components.ProgressBar.html) components inside it.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Components.Select": {
            "name": "Components.Select",
            "shortname": "Components.Select",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-select.js",
            "line": 3,
            "description": "Selectbox component.\n\n#### Deprecated ####\n\nUsage of this component is deprecated. Please use one of the better alternatives for select boxes in Ember, as one of\nthose: https://www.emberaddons.com/?query=select%20component.\n\nIf you use it with a FormElement component as in `{{bs-form-element controlType=\"select\" ... }}`, then see the section\non custom Controls in [Components.FormElement](Components.FormElement.html) to learn how to replace this with an external\nselect component.",
            "extends": "Ember.Component",
            "deprecated": true,
            "access": "public",
            "tagname": ""
        },
        "Components.TabPane": {
            "name": "Components.TabPane",
            "shortname": "Components.TabPane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-tab-pane.js",
            "line": 8,
            "description": "The tab pane of a tab component.\nSee [Components.Tab](Components.Tab.html) for examples.",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.ComponentChild"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Tab": {
            "name": "Components.Tab",
            "shortname": "Components.Tab",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-tab.js",
            "line": 8,
            "description": "Tab component for dynamic tab functionality that mimics the behaviour of Bootstrap's tab.js plugin,\nsee http://getbootstrap.com/javascript/#tabs\n\n### Usage\n\nJust nest any number of [Components.TabPane](Components.TabPane.html) components that hold the tab content.\nThe tab navigation is automatically generated from the tab panes' `title` property:\n\n```hbs\n{{#bs-tab type=type.id}}\n  {{#bs-tab-pane title=\"Tab 1\"}}\n    <p>...</p>\n  {{/bs-tab-pane}}\n  {{#bs-tab-pane title=\"Tab 2\"}}\n    <p>...</p>\n  {{/bs-tab-pane}}\n{{/bs-tab}}\n```\n\n### Groupable (dropdown) tabs\n\nBootstrap's support for dropdown menus as tab navigation is mimiced by the use of the `groupTitle` property.\nAll panes with the same `groupTitle` will be put inside the menu of a [Components.Dropdown](Components.Dropdown.html)\ncomponent with `groupTitle` being the dropdown's title:\n\n```hbs\n{{#bs-tab type=type.id}}\n   {{#bs-tab-pane title=\"Tab 1\"}}\n     <p>...</p>\n   {{/bs-tab-pane}}\n   {{#bs-tab-pane title=\"Tab 2\"}}\n     <p>...</p>\n   {{/bs-tab-pane}}\n   {{#bs-tab-pane title=\"Tab 3\" groupTitle=\"Dropdown\"}}\n     <p>...</p>\n   {{/bs-tab-pane}}\n   {{#bs-tab-pane title=\"Tab 4\" groupTitle=\"Dropdown\"}}\n     <p>...</p>\n   {{/bs-tab-pane}}\n{{/bs-tab}}\n```\n\n### Custom tabs\n\nWhen having the tab pane's `title` as the tab navigation title is not sufficient, for example because you want to\nintegrate some other dynamic content, maybe even other components in the tab navigation item, then you have to setup\nyour navigation by yourself.\n\nSet `customTabs` to true to deactivate the automatic tab navigation generation. Then setup your navigation, probably\nusing a [Components.Nav](Components.Nav.html) component. The tab component yields the `activeId` property as well as\nits `select` action, which you would have to use to manually set the `active` state of the navigation items and to\ntrigger the selection of the different tab panes, using their ids:\n\n```hbs\n{{#bs-tab customTabs=true as |activeId select|}}\n   {{#bs-nav type=\"tabs\"}}\n       {{#bs-nav-item active=(bs-eq activeId \"pane1\")}}<a href=\"#pane1\" role=\"tab\" {{action select \"pane1\"}}>Tab 1</a>{{/bs-nav-item}}\n       {{#bs-nav-item active=(bs-eq activeId \"pane2\")}}<a href=\"#pane1\" role=\"tab\" {{action select \"pane2\"}}>Tab 2 <span class=\"badge\">{{badge}}</span></a>{{/bs-nav-item}}\n   {{/bs-nav}}\n\n   <div class=\"tab-content\">\n   {{#bs-tab-pane elementId=\"pane1\" title=\"Tab 1\"}}\n       <p>...</p>\n   {{/bs-tab-pane}}\n   {{#bs-tab-pane elementId=\"pane2\" title=\"Tab 2\"}}\n       <p>...</p>\n   {{/bs-tab-pane}}\n   </div>\n{{/bs-tab}}\n```\n\nNote that the `bs-eq` helper used in the example above is a private helper, which is not guaranteed to be available for\nthe future. Better use the corresponding `eq` helper of the\n[ember-truth-helpers](https://github.com/jmurphyau/ember-truth-helpers) addon for example!\n\n### Routable tabs\n\nThe tab component purpose is to have panes of content, that are all in DOM at the same time and that are activated and\ndeactivated dynamically, just as the  original Bootstrap implementation.\n\nIf you want to have the content delivered through individual sub routes, just use\nthe [Components.Nav](Components.Nav.html) component and an `{{outlet}}` that show the nested routes' content:\n\n```hbs\n<div>\n  {{#bs-nav type=\"tabs\"}}\n    {{#bs-nav-item}}{{#link-to \"tabs.index\"}}Tab 1{{/link-to}}{{/bs-nav-item}}\n    {{#bs-nav-item}}{{#link-to \"tabs.other\"}}Tab 2{{/link-to}}{{/bs-nav-item}}\n  {{/bs-nav}}\n  {{outlet}}\n</div>\n```",
            "extends": "Ember.Component",
            "uses": [
                "Mixins.ComponentParent"
            ],
            "access": "public",
            "tagname": ""
        },
        "Components.Textarea": {
            "name": "Components.Textarea",
            "shortname": "Components.Textarea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Components",
            "file": "addon/components/bs-textarea.js",
            "line": 3,
            "description": "Extends Ember.TextArea to add Bootstrap's 'form-control' class.",
            "extends": "Ember.TextArea",
            "access": "public",
            "tagname": ""
        },
        "Mixins.ComponentChild": {
            "name": "Mixins.ComponentChild",
            "shortname": "Mixins.ComponentChild",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.TabPane"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/component-child.js",
            "line": 4,
            "description": "Mixin for components that act as a child component in a parent-child relationship of components",
            "access": "public",
            "tagname": ""
        },
        "Mixins.ComponentParent": {
            "name": "Mixins.ComponentParent",
            "shortname": "Mixins.ComponentParent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.NavItem",
                "Components.Tab"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/component-parent.js",
            "line": 3,
            "description": "Mixin for components that act as a parent component in a parent-child relationship of components",
            "access": "public",
            "tagname": ""
        },
        "Mixins.DropdownToggle": {
            "name": "Mixins.DropdownToggle",
            "shortname": "Mixins.DropdownToggle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.DropdownButton",
                "Components.DropdownToggle"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/dropdown-toggle.js",
            "line": 4,
            "description": "Mixin for components that act as dropdown toggles.",
            "access": "public",
            "tagname": ""
        },
        "Mixins.ModalCloser": {
            "name": "Mixins.ModalCloser",
            "shortname": "Mixins.ModalCloser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Mixins",
            "file": "addon/mixins/modal-closer.js",
            "line": 4,
            "access": "public",
            "tagname": ""
        },
        "Mixins.SizeClass": {
            "name": "Mixins.SizeClass",
            "shortname": "Mixins.SizeClass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.ButtonGroup",
                "Components.Button"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/size-class.js",
            "line": 3,
            "description": "Mixin to set the appropriate class for components with different sizes.",
            "access": "public",
            "tagname": ""
        },
        "Mixins.SubComponent": {
            "name": "Mixins.SubComponent",
            "shortname": "Mixins.SubComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.AccordionItem"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/sub-component.js",
            "line": 3,
            "access": "public",
            "tagname": ""
        },
        "Mixins.TypeClass": {
            "name": "Mixins.TypeClass",
            "shortname": "Mixins.TypeClass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Components.AccordionItem",
                "Components.Alert",
                "Components.Button",
                "Components.Navbar",
                "Components.ProgressBar"
            ],
            "namespace": "Mixins",
            "file": "addon/mixins/type-class.js",
            "line": 3,
            "description": "Mixin to set the appropriate class for components with differently styled types (\"success\", \"danger\" etc.)",
            "access": "public",
            "tagname": ""
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "addon/components/bs-accordion-item.js",
            "line": 23,
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "String",
            "default": "'panel'",
            "access": "protected",
            "tagname": "",
            "class": "Components.AccordionItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-accordion-item.js",
            "line": 31,
            "description": "The title of the accordion item, displayed as a .panel-title element",
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.AccordionItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-accordion-item.js",
            "line": 40,
            "description": "The value of the accordion item, which is used as the value of the `selected` property of the parent [Components.Accordion](Components.Accordion.html) component",
            "itemtype": "property",
            "name": "value",
            "access": "public",
            "tagname": "",
            "class": "Components.AccordionItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-accordion.js",
            "line": 35,
            "description": "The value of the currently selected accordion item",
            "itemtype": "property",
            "name": "selected",
            "access": "public",
            "tagname": "",
            "class": "Components.Accordion",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-alert.js",
            "line": 27,
            "description": "A dismissible alert will have a close button in the upper right corner, that the user can click to dismiss\nthe alert.",
            "itemtype": "property",
            "name": "dismissible",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-alert.js",
            "line": 38,
            "description": "If true the alert is completely hidden. Will be set when the fade animation has finished.",
            "itemtype": "property",
            "name": "hidden",
            "type": "boolean",
            "default": "false",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-alert.js",
            "line": 49,
            "description": "This property controls if the alert should be visible. If false it might still be in the DOM until the fade animation\nhas completed.",
            "itemtype": "property",
            "name": "visible",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-alert.js",
            "line": 61,
            "description": "Set to false to disable the fade out animation when hiding the alert.",
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-alert.js",
            "line": 71,
            "description": "Computed property to set the alert class to the component div. Will be false when dismissed to have the component\ndiv (which cannot be removed form DOM by the component itself) without any markup.",
            "itemtype": "property",
            "name": "alert",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-alert.js",
            "line": 82,
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "String",
            "default": "'alert'",
            "access": "protected",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-alert.js",
            "line": 90,
            "description": "The duration of the fade out animation",
            "itemtype": "property",
            "name": "fadeDuration",
            "type": "integer",
            "default": "150",
            "access": "public",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-alert.js",
            "line": 100,
            "description": "The action to be sent after the alert has been dismissed (including the CSS transition).",
            "itemtype": "property",
            "name": "dismissedAction",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-alert.js",
            "line": 124,
            "description": "Call to make the alert visible again after it has been hidden",
            "itemtype": "method",
            "name": "show",
            "access": "private",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-alert.js",
            "line": 136,
            "description": "Call to hide the alert. If the `fade` property is true, this will fade out the alert before being finally\ndismissed.",
            "itemtype": "method",
            "name": "hide",
            "access": "private",
            "tagname": "",
            "class": "Components.Alert",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button-group.js",
            "line": 65,
            "type": "string",
            "itemtype": "property",
            "name": "ariaRole",
            "default": "'group'",
            "access": "protected",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button-group.js",
            "line": 73,
            "itemtype": "property",
            "name": "classNames",
            "type": "array",
            "default": "['btn-group']",
            "access": "protected",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button-group.js",
            "line": 81,
            "itemtype": "property",
            "name": "classNameBindings",
            "type": "array",
            "access": "protected",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button-group.js",
            "line": 88,
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "String",
            "default": "'btn-group'",
            "access": "protected",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button-group.js",
            "line": 96,
            "description": "Set to true for a vertically stacked button group, see http://getbootstrap.com/components/#btn-groups-vertical",
            "itemtype": "property",
            "name": "vertical",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button-group.js",
            "line": 106,
            "description": "Set to true for the buttons to stretch at equal sizes to span the entire width of its parent.\n\n*Important*: You have to wrap every button component in a `div class=\"btn-group\">`:\n\n```handlebars\n<div class=\"btn-group\" role=\"group\">\n{{#bs-button}}My Button{{/bs-button}}\n</div>\n```\n\nSee http://getbootstrap.com/components/#btn-groups-justified",
            "itemtype": "property",
            "name": "justified",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button-group.js",
            "line": 126,
            "description": "The type of the button group specifies how child buttons behave and how the `value` property will be computed:\n\n### null\nIf `type` is not set (null), the button group will add no functionality besides Bootstrap styling\n\n### radio\nif `type` is set to \"radio\", the buttons will behave like radio buttons:\n* the buttons will toggle (`toggle` property of the child buttons will be set to true)\n* only one button may be active\n* the `value` property of the button group will reflect the `value` property of the active button\n\n### checkbox\nif `type` is set to \"checkbox\", the buttons will behave like checkboxes:\n* the buttons will toggle (`toggle` property of the child buttons will be set to true)\n* any number of buttons may be active\n* the `value` property of the button group will be an array containing the `value` properties of all active buttons",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button-group.js",
            "line": 151,
            "description": "The value of the button group, computed by its child buttons.\nSee the `type` property for how the value property is constructed.\n\nWhen you set the value, the corresponding buttons will be activated:\n* use a single value for a radio button group to activate the button with the same value\n* use an array of values for a checkbox button group to activate all the buttons with values contained in the array",
            "itemtype": "property",
            "name": "value",
            "type": "array",
            "access": "public",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button-group.js",
            "line": 177,
            "description": "Child buttons that are active (pressed)",
            "itemtype": "property",
            "name": "activeChildren",
            "type": "array",
            "access": "protected",
            "tagname": "",
            "class": "Components.ButtonGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 86,
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "String",
            "default": "'btn'",
            "access": "protected",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 96,
            "description": "Default label of the button. Not need if used as a block component",
            "itemtype": "property",
            "name": "defaultText",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 105,
            "description": "Property to disable the button",
            "itemtype": "property",
            "name": "disabled",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 115,
            "description": "Set the type of the button, either 'button' or 'submit'",
            "itemtype": "property",
            "name": "buttonType",
            "type": "String",
            "default": "'button'",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 125,
            "description": "Set the 'active' class to apply active/pressed CSS styling",
            "itemtype": "property",
            "name": "active",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 135,
            "description": "Property for block level buttons\n\nSee the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)",
            "itemtype": "property",
            "name": "block",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 146,
            "description": "If toggle property is true, clicking the button will toggle the active state",
            "itemtype": "property",
            "name": "toggle",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 156,
            "description": "If button is active and this is set, the icon property will match this property",
            "itemtype": "property",
            "name": "iconActive",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 165,
            "description": "If button is inactive and this is set, the icon property will match this property",
            "itemtype": "property",
            "name": "iconInactive",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 174,
            "description": "Class(es) (e.g. glyphicons or font awesome) to use as a button icon\nThis will render a <i class=\"{{icon}}\"></i> element in front of the button's label",
            "itemtype": "property",
            "name": "icon",
            "type": "String",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 191,
            "description": "Supply a value that will be associated with this button. This will be send\nas a parameter of the default action triggered when clicking the button",
            "itemtype": "property",
            "name": "value",
            "type": "any",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 201,
            "description": "State of the button. The button's label (if not used as a block component) will be set to the\n`<state>Text` property.\nThis property will automatically be set when using a click action that supplies the callback with an promise",
            "itemtype": "property",
            "name": "textState",
            "type": "String",
            "default": "'default'",
            "access": "protected",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 213,
            "description": "Set this to true to reset the state. A typical use case is to bind this attribute with ember-data isDirty flag.",
            "itemtype": "property",
            "name": "reset",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 222,
            "description": "This will reset the state property to 'default', and with that the button's label to defaultText",
            "itemtype": "method",
            "name": "resetState",
            "access": "protected",
            "tagname": "",
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-button.js",
            "line": 244,
            "description": "Click handler. This will send the default \"action\" action, with the following parameters:\n* value of the button (that is the value of the \"value\" property)\n* original event object of the click event\n* callback: call that with a promise object, and the buttons state will automatically set to \"pending\", \"resolved\" and/or \"rejected\"\n\nWhen using closure actions just return the promise instead of calling the above mentioned callback.",
            "itemtype": "method",
            "name": "click",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": ""
                }
            ],
            "class": "Components.Button",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-collapse.js",
            "line": 27,
            "description": "Collapsed/expanded state",
            "itemtype": "property",
            "name": "collapsed",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-collapse.js",
            "line": 37,
            "description": "True if this item is expanded",
            "itemtype": "property",
            "name": "active",
            "access": "protected",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-collapse.js",
            "line": 49,
            "description": "true if the component is currently transitioning",
            "itemtype": "property",
            "name": "transitioning",
            "type": "boolean",
            "access": "protected",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-collapse.js",
            "line": 58,
            "itemtype": "property",
            "name": "collapseSize",
            "type": "number",
            "access": "protected",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-collapse.js",
            "line": 65,
            "description": "The size of the element when collapsed. Defaults to 0.",
            "itemtype": "property",
            "name": "collapsedSize",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-collapse.js",
            "line": 75,
            "description": "The size of the element when expanded. When null the value is calculated automatically to fit the containing elements.",
            "itemtype": "property",
            "name": "expandedSize",
            "type": "number",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-collapse.js",
            "line": 85,
            "description": "Usually the size (height) of the element is only set while transitioning, and reseted afterwards. Set to true to always set a size.",
            "itemtype": "property",
            "name": "resetSizeWhenNotCollapsing",
            "type": "boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-collapse.js",
            "line": 95,
            "description": "The direction (height/width) of the collapse animation.\nWhen setting this to 'width' you should also define custom CSS transitions for the width property, as the Bootstrap\nCSS does only support collapsible elements for the height direction.",
            "itemtype": "property",
            "name": "collapseDimension",
            "type": "string",
            "default": "'height'",
            "access": "public",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-collapse.js",
            "line": 116,
            "description": "Triggers the show transition",
            "itemtype": "method",
            "name": "show",
            "access": "protected",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-collapse.js",
            "line": 156,
            "description": "Get the size of the element when expanded",
            "itemtype": "method",
            "name": "getExpandedSize",
            "params": [
                {
                    "name": "$action",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-collapse.js",
            "line": 176,
            "description": "Triggers the hide transition",
            "itemtype": "method",
            "name": "hide",
            "access": "protected",
            "tagname": "",
            "class": "Components.Collapse",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown-menu.js",
            "line": 17,
            "description": "Defaults to a `<ul>` tag. Change for other types of dropdown menus.",
            "itemtype": "property",
            "name": "tagName",
            "type": "string",
            "default": "ul",
            "access": "public",
            "tagname": "",
            "class": "Components.DropdownMenu",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown-menu.js",
            "line": 29,
            "itemtype": "property",
            "name": "ariaRole",
            "default": "menu",
            "type": "string",
            "access": "protected",
            "tagname": "",
            "class": "Components.DropdownMenu",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown-menu.js",
            "line": 37,
            "description": "Alignment of the menu, either \"left\" or \"right\"",
            "itemtype": "property",
            "name": "align",
            "type": "string",
            "default": "left",
            "access": "public",
            "tagname": "",
            "class": "Components.DropdownMenu",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown-toggle.js",
            "line": 20,
            "description": "Defaults to a `<a>` tag. Change for other types of dropdown toggles.",
            "itemtype": "property",
            "name": "tagName",
            "type": "string",
            "default": "a",
            "access": "public",
            "tagname": "",
            "class": "Components.DropdownToggle",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown-toggle.js",
            "line": 32,
            "description": "Computed property to generate a `href=\"#\"` attribute when `tagName` is \"a\".",
            "itemtype": "property",
            "name": "href",
            "type": "string",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.DropdownToggle",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown.js",
            "line": 81,
            "description": "This property reflects the state of the dropdown, whether it is open or closed.",
            "itemtype": "property",
            "name": "open",
            "default": "false",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown.js",
            "line": 91,
            "description": "By default clicking on an open dropdown menu will close it. Set this property to false for the menu to stay open.",
            "itemtype": "property",
            "name": "closeOnMenuClick",
            "default": "true",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown.js",
            "line": 101,
            "description": "jQuery click event name, namespaced to this component's instance to prevent interference between multiple dropdowns.",
            "itemtype": "property",
            "name": "clickEventName",
            "type": "string",
            "access": "private",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown.js",
            "line": 110,
            "description": "By default the dropdown menu will expand downwards. Set to 'up' to expand upwards.",
            "itemtype": "property",
            "name": "direction",
            "type": "string",
            "default": "'down'",
            "access": "public",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown.js",
            "line": 120,
            "description": "A computed property to generate the suiting class for the dropdown container, either \"dropdown\", \"dropup\" or \"btn-group\".",
            "itemtype": "property",
            "name": "containerClass",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown.js",
            "line": 136,
            "description": "This property is \"button\" if the toggle element is an instance of [Components.DropdownButton](Components.DropdownButton.html), otherwise \"toggle\".",
            "itemtype": "property",
            "name": "toggleType",
            "type": "string",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-dropdown.js",
            "line": 187,
            "description": "Handler for click events to close the dropdown",
            "itemtype": "method",
            "name": "closeOnClickHandler",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Components.Dropdown",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 122,
            "description": "Text to display within a `<label>` tag.\n\nYou should include a label for every form input cause otherwise screen readers\nwill have trouble with your forms. Use `invisibleLabel` property if you want\nto hide them.",
            "itemtype": "property",
            "name": "label",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 135,
            "description": "Controls label visibilty by adding 'sr-only' class.",
            "itemtype": "property",
            "name": "invisibleLabel",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 144,
            "description": "The type of the control widget.\nSupported types:\n\n* 'text'\n* 'checkbox'\n* 'select' (deprecated)\n* 'textarea'\n* any other type will use an input tag with the `controlType` value as the type attribute (for e.g. HTML5 input\ntypes like 'email'), and the same layout as the 'text' type",
            "itemtype": "property",
            "name": "controlType",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 161,
            "description": "The value of the control element is bound to this property. You can bind it to some controller property to\nget/set the control element's value:\n\n```hbs\n{{bs-form-element controlType=\"email\" label=\"Email\" placeholder=\"Email\" value=email}}\n```\n\nNote: you loose the ability to validate this form element by directly binding to its value. It is recommended\nto use the `property` feature instead.",
            "itemtype": "property",
            "name": "value",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 178,
            "description": "The property name of the form element's `model` (by default the `model` of its parent `Components.Form`) that this\nform element should represent. The control element's value will automatically be bound to the model property's\nvalue.\n\nUsing this property enables form validation on this element.",
            "itemtype": "property",
            "name": "property",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 191,
            "description": "Control element's HTML5 placeholder attribute",
            "itemtype": "property",
            "name": "placeholder",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 200,
            "description": "Control element's HTML5 disabled attribute",
            "itemtype": "property",
            "name": "disabled",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 209,
            "description": "Control element's HTML5 required attribute",
            "itemtype": "property",
            "name": "required",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 218,
            "description": "Control element's HTML5 autofocus attribute",
            "itemtype": "property",
            "name": "autofocus",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 227,
            "description": "Control element's name attribute",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 236,
            "description": "An array of objects containing the selection of choices for multiple choice style form controls, e.g. select\nboxes.\n\n```hbs\n{{bs-form-element controlType=\"select\" choices=countries choiceLabelProperty=\"name\" choiceValueProperty=\"id\" label=\"Country\" value=selectedCountry}}\n```\n\nBe sure to also set the `choiceValueProperty` and `choiceLabelProperty` properties.",
            "itemtype": "property",
            "name": "choices",
            "type": "array",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 252,
            "description": "The property of the `choices` array of objects, containing the value of the choice, e.g. the select box option.",
            "itemtype": "property",
            "name": "choiceValueProperty",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 261,
            "description": "The property of the `choices` array of objects, containing the label of the choice, e.g. the select box option.",
            "itemtype": "property",
            "name": "choiceLabelProperty",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 270,
            "description": "Textarea's rows attribute (ignored for other `controlType`s)",
            "itemtype": "property",
            "name": "rows",
            "type": "number",
            "default": "5",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 280,
            "description": "Textarea's cols attribute (ignored for other `controlType`s)",
            "itemtype": "property",
            "name": "cols",
            "type": "number",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 289,
            "description": "The model used for validation. Defaults to the parent `Components.Form`'s `model`",
            "itemtype": "property",
            "name": "model",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 297,
            "description": "The array of error messages from the `model`'s validation.",
            "itemtype": "property",
            "name": "errors",
            "type": "array",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 306,
            "itemtype": "property",
            "name": "hasErrors",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 314,
            "description": "The array of warning messages from the `model`'s validation.",
            "itemtype": "property",
            "name": "errors",
            "type": "array",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 323,
            "itemtype": "property",
            "name": "hasWarnings",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 331,
            "description": "The array of validation messages (either errors or warnings) rom the `model`'s validation.",
            "itemtype": "property",
            "name": "validationMessages",
            "type": "array",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 348,
            "itemtype": "property",
            "name": "hasValidationMessages",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 356,
            "itemtype": "property",
            "name": "hasValidator",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 364,
            "description": "Set a validating state for async validations",
            "itemtype": "property",
            "name": "isValidating",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 374,
            "description": "If `true` form validation markup is rendered (requires a validatable `model`).",
            "itemtype": "property",
            "name": "showValidation",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 384,
            "itemtype": "property",
            "name": "showValidationMessages",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 392,
            "itemtype": "property",
            "name": "showErrors",
            "type": "boolean",
            "readonly": "",
            "deprecated": true,
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 401,
            "description": "The validation (\"error\" or \"success\") or null if no validation is to be shown. Automatically computed from the\nmodels validation state.",
            "itemtype": "property",
            "name": "validation",
            "readonly": "",
            "type": "string",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 417,
            "itemtype": "property",
            "name": "hasLabel",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 425,
            "description": "True for text field `controlType`s",
            "itemtype": "property",
            "name": "useIcons",
            "type": "boolean",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 437,
            "description": "The form layout used for the markup generation (see http://getbootstrap.com/css/#forms):\n\n* 'horizontal'\n* 'vertical'\n* 'inline'\n\nDefaults to the parent `form`'s `formLayout` property.",
            "itemtype": "property",
            "name": "formLayout",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 452,
            "itemtype": "property",
            "name": "isVertical",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 460,
            "itemtype": "property",
            "name": "isHorizontal",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 468,
            "itemtype": "property",
            "name": "isInline",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 476,
            "description": "The Bootstrap grid class for form labels within a horizontal layout form. Defaults to the value of the same\nproperty of the parent form. The corresponding grid class for form controls is automatically computed.",
            "itemtype": "property",
            "name": "horizontalLabelGridClass",
            "type": "string",
            "default": "'col-md-4'",
            "access": "public",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 487,
            "description": "Computed property that specifies the Bootstrap grid class for form controls within a horizontal layout form.",
            "itemtype": "property",
            "name": "horizontalInputGridClass",
            "type": "string",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 502,
            "description": "Computed property that specifies the Bootstrap offset grid class for form controls within a horizontal layout\nform, that have no label.",
            "itemtype": "property",
            "name": "horizontalInputOffsetGridClass",
            "type": "string",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 517,
            "description": "ID for input field and the corresponding label's \"for\" attribute",
            "itemtype": "property",
            "name": "formElementId",
            "type": "string",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 529,
            "description": "Reference to the parent `Components.Form` class.",
            "itemtype": "property",
            "name": "form",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 555,
            "description": "Setup validation properties. This method acts as a hook for external validation\nlibraries to overwrite. In case of failed validations the `errors` property should contain an array of error messages.",
            "itemtype": "method",
            "name": "setupValidations",
            "access": "protected",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-element.js",
            "line": 564,
            "description": "Listen for focusOut events from the control element to automatically set `showValidation` to true to enable\nform validation markup rendering.",
            "itemtype": "event",
            "name": "focusOut",
            "access": "private",
            "tagname": "",
            "class": "Components.FormElement",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-group.js",
            "line": 31,
            "description": "Whether to show validation state icons.\nSee http://getbootstrap.com/css/#forms-control-validation",
            "itemtype": "property",
            "name": "useIcons",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.FormGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-group.js",
            "line": 42,
            "description": "Computed property which is true if the form group is in a validation state",
            "itemtype": "property",
            "name": "hasValidation",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "Components.FormGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-group.js",
            "line": 52,
            "description": "Computed property which is true if the form group is showing a validation icon",
            "itemtype": "property",
            "name": "hasFeedback",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "Components.FormGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-group.js",
            "line": 62,
            "description": "The icon classes to be used for a feedback icon in a \"success\" validation state.\nDefaults to the usual glyphicon classes. This is ignored, and no feedback icon is\nrendered if `useIcons` is false.\n\nYou can change this globally by setting the `formValidationSuccessIcon` property of\nthe ember-bootstrap configuration in your config/environment.js file. If your are\nusing FontAwesome for example:\n\n```js\nENV['ember-bootstrap'] = {\n  formValidationSuccessIcon: 'fa fa-check'\n}\n```",
            "itemtype": "property",
            "name": "successIcon",
            "type": "string",
            "default": "'glyphicon glyphicon-ok'",
            "access": "public",
            "tagname": "",
            "class": "Components.FormGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-group.js",
            "line": 84,
            "description": "The icon classes to be used for a feedback icon in a \"error\" validation state.\nDefaults to the usual glyphicon classes. This is ignored, and no feedback icon is\nrendered if `useIcons` is false.\n\nYou can change this globally by setting the `formValidationErrorIcon` property of\nthe ember-bootstrap configuration in your config/environment.js file. If your are\nusing FontAwesome for example:\n\n```js\nENV['ember-bootstrap'] = {\n  formValidationErrorIcon: 'fa fa-times'\n}\n```",
            "itemtype": "property",
            "name": "errorIcon",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-group.js",
            "line": 105,
            "description": "The icon classes to be used for a feedback icon in a \"warning\" validation state.\nDefaults to the usual glyphicon classes. This is ignored, and no feedback icon is\nrendered if `useIcons` is false.\n\nYou can change this globally by setting the `formValidationWarningIcon` property of\nthe ember-bootstrap configuration in your config/environment.js file. If your are\nusing FontAwesome for example:\n\n```js\nENV['ember-bootstrap'] = {\n  formValidationWarningIcon: 'fa fa-warning'\n}\n```",
            "itemtype": "property",
            "name": "warningIcon",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-group.js",
            "line": 126,
            "description": "The icon classes to be used for a feedback icon in a \"info\" validation state.\nDefaults to the usual glyphicon classes. This is ignored, and no feedback icon is\nrendered if `useIcons` is false.\n\nYou can change this globally by setting the `formValidationInfoIcon` property of\nthe ember-bootstrap configuration in your config/environment.js file. If your are\nusing FontAwesome for example:\n\n```js\nENV['ember-bootstrap'] = {\n  formValidationInfoIcon: 'fa fa-info-circle\n}\n```\n\nThe \"info\" validation state is not supported in Bootstrap CSS, but can be easily added\nusing the following LESS style:\n```less\n.has-info {\n  .form-control-validation(@state-info-text; @state-info-text; @state-info-bg);\n}\n```",
            "itemtype": "property",
            "name": "infoIcon",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form-group.js",
            "line": 162,
            "description": "Set to a validation state to render the form-group with a validation style.\nSee http://getbootstrap.com/css/#forms-control-validation\n\nThe default states of \"success\", \"warning\" and \"error\" are supported by Bootstrap out-of-the-box.\nBut you can use custom states as well. This will set a has-<state> class, and (if `useIcons`is true)\na feedback whose class is taken from the <state>Icon property",
            "itemtype": "property",
            "name": "validation",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.FormGroup",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 84,
            "description": "Bootstrap form class name (computed)",
            "itemtype": "property",
            "name": "layoutClass",
            "type": "string",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 98,
            "description": "Set a model that this form should represent. This serves several purposes:\n\n* child `Components.FormElement`s can access and bind to this model by their `property`\n* when the model supports validation by using the [ember-validations](https://github.com/dockyard/ember-validations) mixin,\nchild `Components.FormElement`s will look at the validation information of their `property` and render their form group accordingly.\nMoreover the form's `submit` event handler will validate the model and deny submitting if the model is not validated successfully.",
            "itemtype": "property",
            "name": "model",
            "type": "Ember.Object",
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 112,
            "description": "Set the layout of the form to either \"vertical\", \"horizontal\" or \"inline\". See http://getbootstrap.com/css/#forms-inline and http://getbootstrap.com/css/#forms-horizontal",
            "itemtype": "property",
            "name": "formLayout",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 121,
            "description": "Check if validating the model is supported. This needs to be implemented by another addon.",
            "itemtype": "property",
            "name": "hasValidator",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 131,
            "description": "The Bootstrap grid class for form labels. This is used by the `Components.FormElement` class as a default for the\nwhole form.",
            "itemtype": "property",
            "name": "horizontalLabelGridClass",
            "type": "string",
            "default": "'col-md-4'",
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 142,
            "description": "If set to true pressing enter will submit the form, even if no submit button is present",
            "itemtype": "property",
            "name": "submitOnEnter",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 152,
            "description": "If set to true novalidate attribute is present on form element",
            "itemtype": "property",
            "name": "novalidate",
            "type": "boolean",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 166,
            "description": "An array of `Components.FormElement`s that are children of this form.",
            "itemtype": "property",
            "name": "childFormElements",
            "type": "Array",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 178,
            "description": "Validate hook which will return a promise that will either resolve if the model is valid\nor reject if it's not. This should be overridden to add validation support.",
            "params": [
                {
                    "name": "Object",
                    "description": "model"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 198,
            "description": "A handler called before the form is validated (if possible) and submitted.",
            "itemtype": "event",
            "name": "before",
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 205,
            "description": "A handler called when submit has been triggered and the model has passed all validations (if present).",
            "itemtype": "event",
            "name": "action",
            "params": [
                {
                    "name": "Object",
                    "description": "result The returned result from the validate method"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 213,
            "description": "A handler called when validation of the model has failed.",
            "itemtype": "event",
            "name": "invalid",
            "params": [
                {
                    "name": "Object",
                    "description": "error"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-form.js",
            "line": 221,
            "description": "Submit handler that will send the default action (\"action\") to the controller when submitting the form.\n\nIf there is a supplied `model` that supports validation (`hasValidator`) the model will be validated before, and\nonly if validation is successful the default action will be sent. Otherwise an \"invalid\" action will be sent, and\nall the `showValidation` property of all child `Components.FormElement`s will be set to true, so error state and\nmessages will be shown automatically.",
            "itemtype": "method",
            "name": "submit",
            "access": "private",
            "tagname": "",
            "class": "Components.Form",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-dialog.js",
            "line": 20,
            "description": "The title of the modal, visible in the modal header. Is ignored if `header` is false.",
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-dialog.js",
            "line": 29,
            "description": "Display a close button (x icon) in the corner of the modal header.",
            "itemtype": "property",
            "name": "closeButton",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-dialog.js",
            "line": 39,
            "description": "Set to false to disable fade animations.",
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-dialog.js",
            "line": 49,
            "description": "Used to apply Bootstrap's \"in\" class",
            "itemtype": "property",
            "name": "in",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-dialog.js",
            "line": 59,
            "description": "Closes the modal when escape key is pressed.",
            "itemtype": "property",
            "name": "keyboard",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-dialog.js",
            "line": 69,
            "description": "Generate a modal header component automatically. Set to false to disable. In this case you would want to include an\ninstance of [Components.ModalHeader](Components.ModalHeader.html) in the components block template",
            "itemtype": "property",
            "name": "header",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-dialog.js",
            "line": 80,
            "description": "Generate a modal body component automatically. Set to false to disable. In this case you would want to include an\ninstance of [Components.ModalBody](Components.ModalBody.html) in the components block template.\n\nAlways set this to false if `header` and/or `footer` is false!",
            "itemtype": "property",
            "name": "body",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-dialog.js",
            "line": 93,
            "description": "Generate a modal footer component automatically. Set to false to disable. In this case you would want to include an\ninstance of [Components.ModalFooter](Components.ModalFooter.html) in the components block template",
            "itemtype": "property",
            "name": "footer",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-dialog.js",
            "line": 104,
            "description": "Property for size styling, set to null (default), 'lg' or 'sm'\n\nAlso see the [Bootstrap docs](http://getbootstrap.com/javascript/#modals-sizes)",
            "itemtype": "property",
            "name": "size",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-dialog.js",
            "line": 115,
            "description": "If true clicking on the backdrop will close the modal.",
            "itemtype": "property",
            "name": "backdropClose",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-dialog.js",
            "line": 125,
            "description": "Name of the size class",
            "itemtype": "property",
            "name": "sizeClass",
            "type": "string",
            "access": "private",
            "tagname": "",
            "class": "Components.ModalDialog",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-footer.js",
            "line": 19,
            "description": "The title of the default close button. Will be ignored (i.e. no close button) if you provide your own block\ntemplate.",
            "itemtype": "property",
            "name": "closeTitle",
            "type": "string",
            "default": "'Ok'",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalFooter",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-footer.js",
            "line": 30,
            "description": "The title of the submit button (primary button). Will be ignored (i.e. no button) if set to null or if you provide\nyour own block template.",
            "itemtype": "property",
            "name": "submitTitle",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalFooter",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-footer.js",
            "line": 43,
            "description": "Set to true to disable the submit button. If you bind this to some property that indicates if submitting is allowed\n(form validation for example) this can be used to prevent the user from pressing the submit button.",
            "itemtype": "property",
            "name": "submitDisabled",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalFooter",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-footer.js",
            "line": 54,
            "description": "The action to send to the parent modal component when the modal footer's form is submitted",
            "itemtype": "property",
            "name": "submitAction",
            "type": "string",
            "default": "'submit'",
            "access": "private",
            "tagname": "",
            "class": "Components.ModalFooter",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-header.js",
            "line": 16,
            "description": "Show a close button (x icon)",
            "itemtype": "property",
            "name": "closeButton",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalHeader",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal-header.js",
            "line": 26,
            "description": "The title to display in the modal header",
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.ModalHeader",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 140,
            "description": "Visibility of the modal. Toggle to to show/hide with CSS transitions.",
            "itemtype": "property",
            "name": "open",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 150,
            "description": "The title of the modal, visible in the modal header. Is ignored if `header` is false.",
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 159,
            "description": "Display a close button (x icon) in the corner of the modal header.",
            "itemtype": "property",
            "name": "closeButton",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 169,
            "description": "Set to false to disable fade animations.",
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 179,
            "description": "Used to apply Bootstrap's \"in\" class",
            "itemtype": "property",
            "name": "in",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 189,
            "description": "Use a semi-transparent modal background to hide the rest of the page.",
            "itemtype": "property",
            "name": "backdrop",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 199,
            "itemtype": "property",
            "name": "showBackdrop",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 207,
            "description": "Closes the modal when escape key is pressed.",
            "itemtype": "property",
            "name": "keyboard",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 217,
            "description": "If true clicking a close button will hide the modal automatically.\nIf you want to handle hiding the modal by yourself, you can set this to false and use the closeAction to\nimplement your custom logic.",
            "itemtype": "property",
            "name": "autoClose",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 229,
            "description": "Generate a modal header component automatically. Set to false to disable. In this case you would want to include an\ninstance of [Components.ModalHeader](Components.ModalHeader.html) in the components block template",
            "itemtype": "property",
            "name": "header",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 240,
            "description": "Generate a modal body component automatically. Set to false to disable. In this case you would want to include an\ninstance of [Components.ModalBody](Components.ModalBody.html) in the components block template.\n\nAlways set this to false if `header` and/or `footer` is false!",
            "itemtype": "property",
            "name": "body",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 253,
            "description": "Generate a modal footer component automatically. Set to false to disable. In this case you would want to include an\ninstance of [Components.ModalFooter](Components.ModalFooter.html) in the components block template",
            "itemtype": "property",
            "name": "footer",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 264,
            "description": "The id of the `.modal` element.",
            "itemtype": "property",
            "name": "modalId",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 276,
            "description": "The jQuery object of the `.modal` element.",
            "itemtype": "property",
            "name": "modalElement",
            "type": "object",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 288,
            "description": "The id of the backdrop element.",
            "itemtype": "property",
            "name": "backdropId",
            "type": "string",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 300,
            "description": "The jQuery object of the backdrop element.",
            "itemtype": "property",
            "name": "backdropElement",
            "type": "object",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 312,
            "description": "Use CSS transitions when showing/hiding the modal?",
            "itemtype": "property",
            "name": "usesTransition",
            "type": "boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 324,
            "description": "Property for size styling, set to null (default), 'lg' or 'sm'\n\nAlso see the [Bootstrap docs](http://getbootstrap.com/javascript/#modals-sizes)",
            "itemtype": "property",
            "name": "size",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 335,
            "description": "If true clicking on the backdrop will close the modal.",
            "itemtype": "property",
            "name": "backdropClose",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 345,
            "description": "If true component will render in place, rather than be wormholed.",
            "itemtype": "property",
            "name": "renderInPlace",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 355,
            "description": "The action to be sent when the modal footer's submit button (if present) is pressed.\nNote that if your modal body contains a form (e.g. [Components.Form](Components.Form.html){{/crossLink}}) this action will\nnot be triggered. Instead a submit event will be triggered on the form itself. See the class description for an\nexample.",
            "itemtype": "property",
            "name": "submitAction",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 368,
            "description": "The action to be sent when the modal is closing.\nThis will be triggered by pressing the modal header's close button (x button) or the modal footer's close button.\nNote that this will happen before the modal is hidden from the DOM, as the fade transitions will still need some\ntime to finish. Use the `closedAction` if you need the modal to be hidden when the action triggers.\n\nYou can set `autoClose` to false to prevent closing the modal automatically, and do that in your closeAction by\nsetting `open` to false.",
            "itemtype": "property",
            "name": "closeAction",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 384,
            "description": "The action to be sent after the modal has been completely hidden (including the CSS transition).",
            "itemtype": "property",
            "name": "closedAction",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 394,
            "description": "The action to be sent when the modal is opening.\nThis will be triggered immediately after the modal is shown (so it's safe to access the DOM for\nsize calculations and the like). This means that if fade=true, it will be shown in between the\nbackdrop animation and the fade animation.",
            "itemtype": "property",
            "name": "openAction",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 407,
            "description": "The action to be sent after the modal has been completely shown (including the CSS transition).",
            "itemtype": "property",
            "name": "openedAction",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 438,
            "description": "Give the modal (or its autofocus element) focus",
            "itemtype": "method",
            "name": "takeFocus",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 454,
            "description": "Show the modal",
            "itemtype": "method",
            "name": "show",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 497,
            "description": "Hide the modal",
            "itemtype": "method",
            "name": "hide",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 516,
            "description": "Clean up after modal is hidden and call closedAction",
            "itemtype": "method",
            "name": "hideModal",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 536,
            "description": "SHow/hide the backdrop",
            "itemtype": "method",
            "name": "handleBackdrop",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 590,
            "description": "Attach/Detach resize event listeners",
            "itemtype": "method",
            "name": "resize",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 604,
            "itemtype": "method",
            "name": "handleUpdate",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 612,
            "itemtype": "method",
            "name": "adjustDialog",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 624,
            "itemtype": "method",
            "name": "resetAdjustments",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 635,
            "itemtype": "method",
            "name": "checkScrollbar",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 649,
            "itemtype": "method",
            "name": "setScrollbar",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 661,
            "itemtype": "method",
            "name": "resetScrollbar",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-modal.js",
            "line": 669,
            "itemtype": "property",
            "name": "scrollbarWidth",
            "type": "number",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Modal",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-nav-item.js",
            "line": 33,
            "description": "Render the nav item as disabled (see [Bootstrap docs](http://getbootstrap.com/components/#nav-disabled-links)).\nBy default it will look at any nested `link-to` components and make itself disabled if there is a disabled link.\nSee the [link-to API](http://emberjs.com/api/classes/Ember.Templates.helpers.html#toc_disabling-the-code-link-to-code-component)",
            "itemtype": "property",
            "name": "disabled",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.NavItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-nav-item.js",
            "line": 44,
            "description": "Render the nav item as active.\nBy default it will look at any nested `link-to` components and make itself active if there is an active link\n(i.e. the link points to the current route).\nSee the [link-to API](http://emberjs.com/api/classes/Ember.Templates.helpers.html#toc_handling-current-route)",
            "itemtype": "property",
            "name": "active",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "Components.NavItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-nav-item.js",
            "line": 56,
            "description": "Collection of all `Ember.LinkComponent`s that are children",
            "itemtype": "property",
            "name": "childLinks",
            "access": "private",
            "tagname": "",
            "class": "Components.NavItem",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-nav.js",
            "line": 75,
            "description": "Special type of nav, either \"pills\" or \"tabs\"",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Nav",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-nav.js",
            "line": 85,
            "description": "Make the nav justified, see [bootstrap docs](http://getbootstrap.com/components/#nav-justified)",
            "itemtype": "property",
            "name": "justified",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Nav",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-nav.js",
            "line": 95,
            "description": "Make the nav pills stacked, see [bootstrap docs](http://getbootstrap.com/components/#nav-pills)",
            "itemtype": "property",
            "name": "stacked",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Nav",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-navbar.js",
            "line": 70,
            "description": "Manages the state for the responsive menu between the toggle and the content.",
            "itemtype": "property",
            "name": "collapsed",
            "type": "boolean",
            "default": "true",
            "access": "protected",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-navbar.js",
            "line": 80,
            "description": "Controls whether the wrapping div is a fluid container or not.",
            "itemtype": "property",
            "name": "fluid",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-navbar.js",
            "line": 90,
            "description": "Specifies the position classes for the navbar, currently supporting none, \"fixed-top\", \"fixed-bottom\", and \"static-top\".\nSee the [bootstrap docs](http://getbootstrap.com/components/#navbar-fixed-top) for details.",
            "itemtype": "property",
            "name": "position",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.Navbar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-progress-bar.js",
            "line": 47,
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "String",
            "default": "'progress-bar'",
            "access": "protected",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-progress-bar.js",
            "line": 55,
            "description": "The lower limit of the value range",
            "itemtype": "property",
            "name": "minValue",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-progress-bar.js",
            "line": 65,
            "description": "The upper limit of the value range",
            "itemtype": "property",
            "name": "maxValue",
            "type": "number",
            "default": "100",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-progress-bar.js",
            "line": 75,
            "description": "The value the progress bar should represent",
            "itemtype": "property",
            "name": "value",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-progress-bar.js",
            "line": 85,
            "description": "If true a label will be shown inside the progress bar.\n\nBy default it will be the percentage corresponding to the `value` property, rounded to `roundDigits` digits.\nYou can customize it by using the component with a block template, which the component yields the percentage\nvalue to:\n\n```hbs\n{{#bs-progress}}\n  {{#bs-progress-bar value=progressValue as |percent|}}{{progressValue}} ({{percent}}%){{/bs-progress-bar}}\n{{/bs-progress}}\n```",
            "itemtype": "property",
            "name": "showLabel",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-progress-bar.js",
            "line": 105,
            "description": "Create a striped effect, see http://getbootstrap.com/components/#progress-striped",
            "itemtype": "property",
            "name": "striped",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-progress-bar.js",
            "line": 115,
            "description": "Animate the stripes, see http://getbootstrap.com/components/#progress-animated",
            "itemtype": "property",
            "name": "animate",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-progress-bar.js",
            "line": 125,
            "description": "Specify to how many digits the progress bar label should be rounded.",
            "itemtype": "property",
            "name": "roundDigits",
            "type": "number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-progress-bar.js",
            "line": 142,
            "description": "The percentage of `value`",
            "itemtype": "property",
            "name": "percent",
            "type": "number",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-progress-bar.js",
            "line": 158,
            "description": "The percentage of `value`, rounded to `roundDigits` digits",
            "itemtype": "property",
            "name": "percentRounded",
            "type": "number",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-progress-bar.js",
            "line": 171,
            "itemtype": "property",
            "name": "style",
            "type": "string",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "Components.ProgressBar",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab-pane.js",
            "line": 24,
            "description": "True if this pane is active (visible)",
            "itemtype": "property",
            "name": "isActive",
            "type": "boolean",
            "access": "protected",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab-pane.js",
            "line": 35,
            "description": "Used to apply Bootstrap's \"active\" class",
            "itemtype": "property",
            "name": "active",
            "type": "boolean",
            "default": "false",
            "access": "protected",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab-pane.js",
            "line": 45,
            "description": "Used to apply Bootstrap's \"in\" class",
            "itemtype": "property",
            "name": "in",
            "type": "boolean",
            "default": "false",
            "access": "protected",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab-pane.js",
            "line": 55,
            "description": "Use CSS transitions when showing/hiding the pane?",
            "itemtype": "property",
            "name": "usesTransition",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab-pane.js",
            "line": 67,
            "description": "The parent [Components.Tab](Components.Tab.html) instance.",
            "itemtype": "property",
            "name": "tab",
            "type": "{Components.Tab}",
            "access": "protected",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab-pane.js",
            "line": 78,
            "description": "The title for this tab pane. This is used by the `bs-tab` component to automatically generate\nthe tab navigation.\nSee the [Components.Tab](Components.Tab.html) for examples.",
            "itemtype": "property",
            "name": "title",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab-pane.js",
            "line": 90,
            "description": "An optional group title used by the `bs-tab` component to group all panes with the same group title\nunder a common drop down in the tab navigation.\nSee the [Components.Tab](Components.Tab.html) for examples.",
            "itemtype": "property",
            "name": "groupTitle",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab-pane.js",
            "line": 102,
            "description": "Use fade animation when switching tabs.",
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab-pane.js",
            "line": 112,
            "description": "The duration of the fade out animation",
            "itemtype": "property",
            "name": "fadeDuration",
            "type": "integer",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab-pane.js",
            "line": 122,
            "description": "Show the pane",
            "itemtype": "method",
            "name": "show",
            "access": "protected",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab-pane.js",
            "line": 145,
            "description": "Hide the pane",
            "itemtype": "method",
            "name": "hide",
            "access": "protected",
            "tagname": "",
            "class": "Components.TabPane",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab.js",
            "line": 111,
            "description": "Type of nav, either \"pills\" or \"tabs\"",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "'tabs'",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab.js",
            "line": 121,
            "description": "By default the tabs will be automatically generated using the available [TabPane](Components.TabPane.html)\ncomponents. If set to true, you can deactivate this and setup the tabs manually. See the example above.",
            "itemtype": "property",
            "name": "customTabs",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab.js",
            "line": 132,
            "description": "The id (`elementId`) of the active [TabPane](Components.TabPane.html).\nBy default the first tab will be active, but this can be changed by setting this property\n\n```hbs\n{{#bs-tab activeId=\"pane2\"}}\n  {{#bs-tab-pane id=\"pane1\" title=\"Tab 1\"}}\n     ...\n  {{/bs-tab-pane}}\n  {{#bs-tab-pane id=\"pane1\" title=\"Tab 1\"}}\n    ...\n  {{/bs-tab-pane}}\n{{/bs-tab}}\n```",
            "itemtype": "property",
            "name": "activeId",
            "type": "string",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab.js",
            "line": 153,
            "description": "Set to false to disable the fade animation when switching tabs.",
            "itemtype": "property",
            "name": "fade",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab.js",
            "line": 163,
            "description": "The duration of the fade animation",
            "itemtype": "property",
            "name": "fadeDuration",
            "type": "integer",
            "default": "150",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab.js",
            "line": 173,
            "description": "action is called when switching the active tab, with the new and previous pane id",
            "itemtype": "event",
            "name": "action",
            "access": "public",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab.js",
            "line": 181,
            "description": "All `TabPane` child components",
            "itemtype": "property",
            "name": "childPanes",
            "type": "array",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/components/bs-tab.js",
            "line": 193,
            "description": "Array of objects that define the tab structure",
            "itemtype": "property",
            "name": "navItems",
            "type": "array",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Components.Tab",
            "namespace": "Components"
        },
        {
            "file": "addon/mixins/component-child.js",
            "line": 13,
            "description": "flag to check if component has already been rendered, for the `_willRender` event handler",
            "itemtype": "property",
            "name": "_didInsert",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "Mixins.ComponentChild",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-child.js",
            "line": 21,
            "description": "Register ourself as a child at the parent component\nWe use the `willRender` event here to also support the fastboot environment, where there is no `didInsertElement`",
            "itemtype": "method",
            "name": "_willRender",
            "access": "private",
            "tagname": "",
            "class": "Mixins.ComponentChild",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-child.js",
            "line": 39,
            "description": "stores the parent in didInsertElement hook as a work-a-round for\nhttps://github.com/emberjs/ember.js/issues/12080",
            "itemtype": "property",
            "name": "_parent",
            "access": "private",
            "tagname": "",
            "class": "Mixins.ComponentChild",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-child.js",
            "line": 48,
            "description": "Unregister form the parent component",
            "itemtype": "method",
            "name": "_willDestroyElement",
            "access": "private",
            "tagname": "",
            "class": "Mixins.ComponentChild",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-parent.js",
            "line": 12,
            "description": "Array of registered child components",
            "itemtype": "property",
            "name": "children",
            "type": "array",
            "access": "protected",
            "tagname": "",
            "class": "Mixins.ComponentParent",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-parent.js",
            "line": 25,
            "description": "Register a component as a child of this parent",
            "itemtype": "method",
            "name": "registerChild",
            "params": [
                {
                    "name": "child",
                    "description": ""
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Mixins.ComponentParent",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/component-parent.js",
            "line": 38,
            "description": "Remove the child component from this parent component",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": ""
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Mixins.ComponentParent",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/dropdown-toggle.js",
            "line": 14,
            "itemtype": "property",
            "name": "ariaRole",
            "default": "button",
            "type": "string",
            "access": "protected",
            "tagname": "",
            "class": "Mixins.DropdownToggle",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/dropdown-toggle.js",
            "line": 24,
            "description": "The default action is set to \"toggleDropdown\" on the parent {{#crossLink \"Components.Dropdown\"}}{{/crossLink}}",
            "itemtype": "property",
            "name": "action",
            "default": "toggleDropdown",
            "type": "string",
            "access": "protected",
            "tagname": "",
            "class": "Mixins.DropdownToggle",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/size-class.js",
            "line": 12,
            "description": "Prefix for the size class, e.g. \"btn\" for button size classes (\"btn-lg\", \"btn-sm\" etc.)",
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "string",
            "required": 1,
            "access": "protected",
            "tagname": "",
            "class": "Mixins.SizeClass",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/size-class.js",
            "line": 30,
            "description": "Property for size styling, set to 'lg', 'sm' or 'xs'\n\nAlso see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)",
            "itemtype": "property",
            "name": "size",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Mixins.SizeClass",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/type-class.js",
            "line": 11,
            "description": "Prefix for the type class, e.g. \"btn\" for button type classes (\"btn-primary2 etc.)",
            "itemtype": "property",
            "name": "classTypePrefix",
            "type": "string",
            "required": 1,
            "access": "protected",
            "tagname": "",
            "class": "Mixins.TypeClass",
            "namespace": "Mixins"
        },
        {
            "file": "addon/mixins/type-class.js",
            "line": 29,
            "description": "Property for type styling\n\nFor the available types see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-options) (use without \"btn-\" prefix)",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "'default'",
            "access": "public",
            "tagname": "",
            "class": "Mixins.TypeClass",
            "namespace": "Mixins"
        },
        {
            "file": "addon/utils/array-includes.js",
            "line": 3,
            "description": "Handle Ember.Array.contains deprecation: http://emberjs.com/deprecations/v2.x/#toc_enumerable-contains",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "",
            "namespace": "Mixins"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nValidate hook which will return a promise that will either resolve if the model is valid\nor reject if it's not. This should be overridden to add validation support.",
            "line": " addon/components/bs-form.js:178"
        },
        {
            "message": "Missing item type\nHandle Ember.Array.contains deprecation: http://emberjs.com/deprecations/v2.x/#toc_enumerable-contains",
            "line": " addon/utils/array-includes.js:3"
        }
    ]
}